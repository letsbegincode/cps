{
  "title": "expressions",
  "content": "SIMPLE OPERATIONS\nparentheses used to tell Python to do these \noperations first\noperator precedence without parentheses\n◦**\n◦*\n◦/\n◦+ and –executed left to right, as appear in expression\n6.0001 LECTURE 1\n30\n\nBINDING VARIABLES AND \nVALUES\nequal sign is an assignmentof a value to a variable \nname\npi = 3.14159\npi_approx= 22/7\nvalue stored in computer memory\nan assignment binds name to value\nretrieve value associated with name or variable by \ninvoking the name, by typing pi\n6.0001 LECTURE 1\n31\n\nABSTRACTING EXPRESSIONS\nwhy give names to values of expressions?\nto reuse names instead of values\neasier to change code later\npi = 3.14159\nradius = 2.2\narea = pi*(radius**2)\n6.0001 LECTURE 1\n32\n\nPROGRAMMING vs MATH\nin programming, you do not “solve for x”\npi = 3.14159\nradius = 2.2\n# area of circle\narea = pi*(radius**2)\nradius = radius+1\n6.0001 LECTURE 1\n33\n\nCHANGING BINDINGS\ncan re-bindvariable names using new assignment \nstatements\nprevious value may still stored in memory but lost the \nhandle for it\nvalue for area does not change until you tell the \ncomputer to do the calculation again\n6.0001 LECTURE 1\n34\npi\nradius\narea\n3.14\n2.2\n15.1976\n3.2\npi = 3.14\nradius = 2.2\narea = pi*(radius**2)\nradius = radius+1\n\nMIT OpenCourseWare\nhttps://ocw.mit.edu\n6.0001 Introduction to Computer Science and Programming in Python\nFall  2016\nFor information about citing these materials or our Terms of Use, visit: https://ocw.mit.edu/terms."
}