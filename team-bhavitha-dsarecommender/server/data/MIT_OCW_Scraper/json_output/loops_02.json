{
  "title": "loops",
  "lecture": "02",
  "content": "# more complicated with while loop\nn = 0\nwhile n < 5:\nprint(n)\nn = n+1\n# shortcut with for loop\nfor n in range(5):\nprint(n)\n6.0001 LECTURE 2\n18\n\nCONTROL FLOW: forLOOPS\nfor <variable> in range(<some_num>):\n<expression>\n<expression> \n...\neach time through the loop, <variable> takes a value\nfirst time, <variable> starts at the smallest value\nnext time, <variable> gets the prevvalue + 1\netc.\n6.0001 LECTURE 2\n19\n\nrange(start,stop,step)\ndefault values are start = 0and step = 1and optional\nloop until value is stop -1 \nmysum= 0\nfor iin range(7, 10):\nmysum+= i\nprint(mysum)\nmysum= 0\nfor iin range(5, 11, 2):\nmysum+= i\nprint(mysum)\n6.0001 LECTURE 2\n20\n\nbreakSTATEMENT\nimmediately exits whatever loop it is in\nskips remaining expressions in code block\nexits only innermost loop!\nwhile <condition_1>:\nwhile <condition_2>:\n<expression_a>\nbreak\n<expression_b>\n<expression_c>\n6.0001 LECTURE 2\n21\n\nbreakSTATEMENT\nmysum = 0\nfor i in range(5, 11, 2):\nmysum += i\nif mysum== 5:\nbreak\nmysum+= 1\nprint(mysum)\nwhat happens in this program? \nmysum+= i\nif mysum== 5:\nbreak\n6.0001 LECTURE 2\n22\n\nforVS whileLOOPS\nforloops\nknownumber of \niterations\ncan end early via \nbreak\nuses a counter\ncanrewritea for loop \nusing a while loop\nwhileloops\nunboundednumber of \niterations\ncan end early via break\ncan use a counter but \nmust initialize before loop \nand increment it inside loop\nmay not be able to \nrewrite a whileloop using \na forloop\n6.0001 LECTURE 2\n23\n\nMIT OpenCourseWare\nhttps://ocw.mit.edu\n6.0001 Introduction to Computer Science and Programming in Python\nFall  2016\nFor information about citing these materials or our Terms of Use, visit: https://ocw.mit.edu/terms."
}