{
  "title": "conditionals",
  "lecture": "02",
  "content": "COMPARISON OPERATORS ON\nint,float, string\niand jare variable names\ncomparisons below evaluate to a Boolean \ni> j\ni>= j\ni< j\ni<= j\ni== jequalitytest, Trueif iis the same as j\ni!= jinequalitytest, Trueif inot the same as j\n6.0001 LECTURE 2\n7\n\nLOGIC OPERATORS ON bools\naand bare variable names (with Boolean values)\nnot aTrueif ais False\nFalseif ais True\na and bTrueif both are True\na or bTrueif either or both are True\n6.0001 LECTURE 2\n8\nABA and BA or B\nTrueTrueTrueTrue\nTrueFalseFalseTrue\nFalseTrueFalseTrue\nFalseFalseFalseFalse\n\nCOMPARISON EXAMPLE\npset_time= 15\nsleep_time= 8\nprint(sleep_time> pset_time)\nderive = True\ndrink = False\nboth = drink and derive\nprint(both)\n6.0001 LECTURE 2\n9\n\nIf right clear,\ngo right \nIf right blocked,\ngo forward\nIf right and \nfront blocked,\ngo left\nIf right , front, \nleft blocked,\ngo back\n6.0001 LECTURE 2\n10\n\nCONTROL FLOW -BRANCHING\nif <condition>:\n<expression>\n<expression>\n...\nif <condition>:\n<expression>\n<expression>\n...\nelse:\n<expression>\n<expression>\n...\nif <condition>:\n<expression>\n<expression>\n...\nelif<condition>:\n<expression> \n<expression>\n...\nelse:\n<expression>\n<expression>\n...\n<condition>has a value Trueor False\nevaluate expressions in that block if <condition> is True\n6.0001 LECTURE 2\n11\n\nINDENTATION\nmatters in Python\nhow you denote blocks of code\nx =  float(input(\"Enter a number for x: \"))\ny =  float(input(\"Enter a number for y: \"))\nif x == y:\nprint(\"x and y are equal\")\nif y != 0:\nprint(\"therefore, x / y is\", x/y)\nelifx < y:\nprint(\"x is  smaller\")\nelse:\nprint(\"y is  smaller\")\nprint(\"thanks!\")\nprint(\"x and y are equal\")\nif y != 0:\nprint(\"therefore, x / y is\", x/y)\nprint(\"x is smaller\")\nprint(\"y is smaller\")\n6.0001 LECTURE 2\n12\n\n=vs ==\nx = float(input(\"Enter a number for x: \"))\ny = float(input(\"Enter a number for y: \"))\nif x == y:\nprint(\"x and y are equal\")\nif y != 0:\nprint(\"therefore, x / y is\", x/y)\nelifx < y:\nprint(\"x is smaller\")\nelse:\nprint(\"y is smaller\")\nprint(\"thanks!\")\n6.0001 LECTURE 2\n13\n\nLegend of Zelda –\nLost Woods\nkeep going right, \ntakes you back to this \nsame screen, stuck in \na loop\nif <exit right>:\n<set background to woods_background>\nif <exit right>:\n<set background to woods_background>\nif <exit right>:\n<set background to woods_background>\nand so on and on and on...\nelse:\n<set background to exit_background>\nelse:\n<set background to exit_background>\nelse:\n<set background to exit_background>\n<set background to woods_background>\nif <exit right>:\nelse:\n<set background to exit_background>\n<set background to woods_background>\nif <exit right>:\nelse:\n<set background to exit_background>\n<set background to woods_background>\nand so on and on and on...\n<set background to exit_background>\n6.0001 LECTURE 2\n14\nImage Courtesy Nintendo, All Rights Reserved. This content is excluded from our Creative\nCommons license. For more information, see http://ocw.mit.edu/help/faq-fair-use/.\n\nwhile <exit right>:\n<set background to woods_background>\n<set background to exit_background>\nLegend of Zelda –\nLost Woods\nkeep going right, \ntakes you back to this \nsame screen, stuck in \na loop\n6.0001 LECTURE 2\n15\n<set background to woods_background>\nWord Cloud copyright unknown, All Right Reserved. This content is excluded from our Creative\nCommons license. For more information, see http://ocw.mit.edu/help/faq-fair-use/.\n\nCONTROL FLOW: \nwhileLOOPS\nwhile <condition>:\n<expression>\n<expression>\n...\n<condition> evaluates to a Boolean\nif <condition> is True, do all the steps inside the \nwhile code block\ncheck <condition> again\nrepeat until <condition> is False\n6.0001 LECTURE 2\n16\n\nwhileLOOP EXAMPLE\nYou are in the Lost Forest.\n************\n************\n\n************\n************\nGo left or right?\nPROGRAM:\nn = input(\"You're in the Lost Forest. Go left or right? \")\nwhile n == \"right\":\nn = input(\"You're in the Lost Forest. Go left or right? \")\nprint(\"You got out of the Lost Forest!\")\n6.0001 LECTURE 2\n17\n\nCONTROL FLOW: \nwhile and forLOOPS\niterate through numbers in a sequence\n# more complicated with while loop\nn = 0\nwhile n < 5:\nprint(n)\nn = n+1\n# shortcut with for loop\nfor n in range(5):\nprint(n)\n6.0001 LECTURE 2\n18\n\nCONTROL FLOW: forLOOPS\nfor <variable> in range(<some_num>):\n<expression>\n<expression> \n...\neach time through the loop, <variable> takes a value\nfirst time, <variable> starts at the smallest value\nnext time, <variable> gets the prevvalue + 1\netc.\n6.0001 LECTURE 2\n19\n\nrange(start,stop,step)\ndefault values are start = 0and step = 1and optional\nloop until value is stop -1 \nmysum= 0\nfor iin range(7, 10):\nmysum+= i\nprint(mysum)\nmysum= 0\nfor iin range(5, 11, 2):\nmysum+= i\nprint(mysum)\n6.0001 LECTURE 2\n20\n\nbreakSTATEMENT\nimmediately exits whatever loop it is in\nskips remaining expressions in code block\nexits only innermost loop!\nwhile <condition_1>:\nwhile <condition_2>:\n<expression_a>\nbreak\n<expression_b>\n<expression_c>\n6.0001 LECTURE 2\n21\n\nbreakSTATEMENT\nmysum = 0\nfor i in range(5, 11, 2):\nmysum += i\nif mysum== 5:\nbreak\nmysum+= 1\nprint(mysum)\nwhat happens in this program? \nmysum+= i\nif mysum== 5:\nbreak\n6.0001 LECTURE 2\n22\n\nforVS whileLOOPS\nforloops\nknownumber of \niterations\ncan end early via \nbreak\nuses a counter\ncanrewritea for loop \nusing a while loop\nwhileloops\nunboundednumber of \niterations\ncan end early via break\ncan use a counter but \nmust initialize before loop \nand increment it inside loop\nmay not be able to \nrewrite a whileloop using \na forloop\n6.0001 LECTURE 2\n23\n\nMIT OpenCourseWare\nhttps://ocw.mit.edu\n6.0001 Introduction to Computer Science and Programming in Python\nFall  2016\nFor information about citing these materials or our Terms of Use, visit: https://ocw.mit.edu/terms."
}