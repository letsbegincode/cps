{
  "title": "bisection",
  "lecture": "03",
  "content": "BISECTION SEARCH\nhalf interval each iteration\nnew guess is halfway in between\nto illustrate, let’s play a game!\n6.0001 LECTURE 3\n17\nGUESS\nGUESS\nGUESS\n\nBISECTION SEARCH \n–cube root\ncube= 27\nepsilon = 0.01\nnum_guesses= 0\nlow = 0\nhigh = cube\nguess = (high + low)/2.0\nwhile abs(guess**3 -cube) >= epsilon:\nif guess**3 < cube :\nlow = guess\nelse:\nhigh = guess\nguess = (high + low)/2.0\nnum_guesses+= 1\nprint 'num_guesses=', num_guesses\nprint guess, 'is close to the cube root of', cube\n6.0001 LECTURE 3\n18\n\nBISECTION SEARCH \nCONVERGENCE\nsearch space\n◦first guess: N/2\n◦second guess: N/4\n◦kth guess:N/2\nk\nguess converges on the order of log\n2\nNsteps\nbisection search works when value of function varies \nmonotonically with input\ncode as shown only works for positive cubes > 1 –why?\nchallenges modify to work with negative cubes!\nmodify to work with x < 1!\n6.0001 LECTURE 3\n19\n\nx< 1\nif x < 1, search space is 0 to x but cube root is greater \nthan x and less than 1\nmodify the code to choose the search space \ndepending on value of x\n6.0001 LECTURE 3\n20\n\nMIT OpenCourseWare\nhttps://ocw.mit.edu\n6.0001 Introduction to Computer Science and Programming in Python\nFall  2016\nFor information about citing these materials or our Terms of Use, visit: https://ocw.mit.edu/terms."
}