[{
  "_id": {
    "$oid": "686e7be67e20de1e720bfda8"
  },
  "conceptId": "variables",
  "title": "Variables",
  "description": "Description for Variables.",
  "videoUrl": "https://dummyurl.com/video/variables",
  "prerequisites": [],
  "content": {
    "intro": "Variables store data for processing in a program. They are fundamental building blocks in all programming languages.",
    "sections": [
      {
        "heading": "Understanding Variables",
        "content": "Variables are containers for storing data values. The syntax depends on the language but follows general conventions.",
        "codeExamples": [
          "int age = 25;\nSystem.out.println(\"Age is: \" + age);"
        ]
      },
      {
        "heading": "Variable Scope and Shadowing",
        "content": "Scopes define the visibility of variables. Shadowing occurs when a variable in a local scope has the same name as one in an outer scope.",
        "codeExamples": [
          "int x = 10;\n{\n    int x = 20;\n    System.out.println(x); // 20\n}\nSystem.out.println(x); // 10"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Variables?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Variables is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Variables?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Variables implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Variables commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Variables early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Variables early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Variables is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Variables?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Variables is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "basics"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfda9"
  },
  "conceptId": "data_types",
  "title": "Data Types",
  "description": "Description for Data Types.",
  "videoUrl": "https://dummyurl.com/video/data_types",
  "prerequisites": [],
  "content": {
    "intro": "Data types classify data into different types, helping the compiler or interpreter understand how the programmer intends to use the data.",
    "sections": [
      {
        "heading": "Basic Data Types",
        "content": "Common data types include int, float, char, boolean.",
        "codeExamples": [
          "int x = 42;\ndouble pi = 3.14;\nchar letter = 'A';\nSystem.out.println(x + \", \" + pi + \", \" + letter);"
        ]
      },
      {
        "heading": "Type Conversion",
        "content": "Typecasting allows conversion between compatible data types.",
        "codeExamples": [
          "int x = 5;\ndouble y = x;\nint z = (int) y;\nSystem.out.println(z);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Data Types?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Data Types is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Data Types?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Data Types implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Data Types commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Data Types early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Data Types early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Data Types is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Data Types?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Data Types is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "basics"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdaa"
  },
  "conceptId": "primitive_types",
  "title": "Primitive Types",
  "description": "Description for Primitive Types.",
  "videoUrl": "https://dummyurl.com/video/primitive_types",
  "prerequisites": [],
  "content": {
    "intro": "Primitive types are predefined by the programming language and named by a reserved keyword.",
    "sections": [
      {
        "heading": "Primitive Types Overview",
        "content": "Primitive types are basic types such as int, char, float, and boolean.",
        "codeExamples": [
          "int a = 100;\nboolean flag = true;\nSystem.out.println(a + \", \" + flag);"
        ]
      },
      {
        "heading": "Precision and Range",
        "content": "Different types have different storage capacities.",
        "codeExamples": [
          "System.out.println(Byte.MIN_VALUE);\nSystem.out.println(Byte.MAX_VALUE);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Primitive Types?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Primitive Types is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Primitive Types?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Primitive Types implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Primitive Types commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Primitive Types early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Primitive Types early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Primitive Types is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Primitive Types?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Primitive Types is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "basics"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdab"
  },
  "conceptId": "non_primitive_types",
  "title": "Non-Primitive Types",
  "description": "Description for Non-Primitive Types.",
  "videoUrl": "https://dummyurl.com/video/non_primitive_types",
  "prerequisites": [],
  "content": {
    "intro": "Non-primitive types are derived from primitive types and include arrays, classes, and interfaces.",
    "sections": [
      {
        "heading": "Introduction to Non-Primitive Types",
        "content": "These include Strings, Arrays, and Custom Classes.",
        "codeExamples": [
          "String name = \"Ayush\";\nSystem.out.println(name.toUpperCase());"
        ]
      },
      {
        "heading": "Objects and Classes",
        "content": "Classes define blueprints for objects.",
        "codeExamples": [
          "class Person {\n String name;\n Person(String n) { name = n; }\n}\nPerson p = new Person(\"John\");"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Non-Primitive Types?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Non-Primitive Types is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Non-Primitive Types?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Non-Primitive Types implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Non-Primitive Types commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Non-Primitive Types early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Non-Primitive Types early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Non-Primitive Types is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Non-Primitive Types?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Non-Primitive Types is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "basics"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdac"
  },
  "conceptId": "operators",
  "title": "Operators",
  "description": "Description for Operators.",
  "videoUrl": "https://dummyurl.com/video/operators",
  "prerequisites": [],
  "content": {
    "intro": "Operators are special symbols that perform operations on variables and values.",
    "sections": [
      {
        "heading": "Arithmetic Operators",
        "content": "Arithmetic operators perform basic math.",
        "codeExamples": [
          "int a = 5, b = 3;\nSystem.out.println(a + b);"
        ]
      },
      {
        "heading": "Relational and Logical Operators",
        "content": "Used for comparisons and boolean logic.",
        "codeExamples": [
          "System.out.println(5 > 3 && 2 < 4);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Operators?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Operators is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Operators?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Operators implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Operators commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Operators early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Operators early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Operators is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Operators?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Operators is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "basics"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdad"
  },
  "conceptId": "control_flow",
  "title": "Control Flow",
  "description": "Description for Control Flow.",
  "videoUrl": "https://dummyurl.com/video/control_flow",
  "prerequisites": [],
  "content": {
    "intro": "Control Flow is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Control Flow",
        "content": "This section provides a basic explanation of Control Flow, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Control Flow",
        "content": "Let's look at how Control Flow is applied in real-world scenarios. We'll walk through code that uses Control Flow effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Control Flow?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Control Flow is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Control Flow?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Control Flow implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Control Flow commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Control Flow early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Control Flow early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Control Flow is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Control Flow?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Control Flow is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "basics"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdae"
  },
  "conceptId": "conditional_statements",
  "title": "Conditional Statements",
  "description": "Description for Conditional Statements.",
  "videoUrl": "https://dummyurl.com/video/conditional_statements",
  "prerequisites": [],
  "content": {
    "intro": "Conditional Statements is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Conditional Statements",
        "content": "This section provides a basic explanation of Conditional Statements, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Conditional Statements",
        "content": "Let's look at how Conditional Statements is applied in real-world scenarios. We'll walk through code that uses Conditional Statements effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Conditional Statements?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Conditional Statements is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Conditional Statements?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Conditional Statements implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Conditional Statements commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Conditional Statements early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Conditional Statements early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Conditional Statements is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Conditional Statements?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Conditional Statements is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "basics"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdaf"
  },
  "conceptId": "loops",
  "title": "Loops",
  "description": "Description for Loops.",
  "videoUrl": "https://dummyurl.com/video/loops",
  "prerequisites": [],
  "content": {
    "intro": "Loops is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Loops",
        "content": "This section provides a basic explanation of Loops, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Loops",
        "content": "Let's look at how Loops is applied in real-world scenarios. We'll walk through code that uses Loops effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Loops?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Loops is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Loops?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Loops implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Loops commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Loops early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Loops early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Loops is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Loops?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Loops is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "basics"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdb0"
  },
  "conceptId": "functions",
  "title": "Functions",
  "description": "Description for Functions.",
  "videoUrl": "https://dummyurl.com/video/functions",
  "prerequisites": [],
  "content": {
    "intro": "Functions is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Functions",
        "content": "This section provides a basic explanation of Functions, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Functions",
        "content": "Let's look at how Functions is applied in real-world scenarios. We'll walk through code that uses Functions effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Functions?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Functions is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Functions?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Functions implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Functions commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Functions early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Functions early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Functions is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Functions?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Functions is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "basics"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdb1"
  },
  "conceptId": "scope_lifetime",
  "title": "Scope & Lifetime",
  "description": "Description for Scope & Lifetime.",
  "videoUrl": "https://dummyurl.com/video/scope_lifetime",
  "prerequisites": [],
  "content": {
    "intro": "Scope & Lifetime is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Scope & Lifetime",
        "content": "This section provides a basic explanation of Scope & Lifetime, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Scope & Lifetime",
        "content": "Let's look at how Scope & Lifetime is applied in real-world scenarios. We'll walk through code that uses Scope & Lifetime effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Scope & Lifetime?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Scope & Lifetime is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Scope & Lifetime?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Scope & Lifetime implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Scope & Lifetime commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Scope & Lifetime early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Scope & Lifetime early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Scope & Lifetime is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Scope & Lifetime?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Scope & Lifetime is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "basics"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdb2"
  },
  "conceptId": "arrays",
  "title": "Arrays",
  "description": "Description for Arrays.",
  "videoUrl": "https://dummyurl.com/video/arrays",
  "prerequisites": [],
  "content": {
    "intro": "Arrays is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Arrays",
        "content": "This section provides a basic explanation of Arrays, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Arrays",
        "content": "Let's look at how Arrays is applied in real-world scenarios. We'll walk through code that uses Arrays effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Arrays?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Arrays is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Arrays?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Arrays implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Arrays commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Arrays early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Arrays early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Arrays is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Arrays?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Arrays is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdb3"
  },
  "conceptId": "1d_arrays",
  "title": "1D Arrays",
  "description": "Description for 1D Arrays.",
  "videoUrl": "https://dummyurl.com/video/1d_arrays",
  "prerequisites": [],
  "content": {
    "intro": "1D Arrays is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of 1D Arrays",
        "content": "This section provides a basic explanation of 1D Arrays, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of 1D Arrays",
        "content": "Let's look at how 1D Arrays is applied in real-world scenarios. We'll walk through code that uses 1D Arrays effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of 1D Arrays?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "1D Arrays is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about 1D Arrays?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "1D Arrays implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is 1D Arrays commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning 1D Arrays early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn 1D Arrays early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "1D Arrays is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to 1D Arrays?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "1D Arrays is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdb4"
  },
  "conceptId": "2d_arrays",
  "title": "2D Arrays",
  "description": "Description for 2D Arrays.",
  "videoUrl": "https://dummyurl.com/video/2d_arrays",
  "prerequisites": [],
  "content": {
    "intro": "2D Arrays is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of 2D Arrays",
        "content": "This section provides a basic explanation of 2D Arrays, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of 2D Arrays",
        "content": "Let's look at how 2D Arrays is applied in real-world scenarios. We'll walk through code that uses 2D Arrays effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of 2D Arrays?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "2D Arrays is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about 2D Arrays?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "2D Arrays implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is 2D Arrays commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning 2D Arrays early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn 2D Arrays early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "2D Arrays is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to 2D Arrays?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "2D Arrays is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdb5"
  },
  "conceptId": "dynamic_arrays",
  "title": "Dynamic Arrays",
  "description": "Description for Dynamic Arrays.",
  "videoUrl": "https://dummyurl.com/video/dynamic_arrays",
  "prerequisites": [],
  "content": {
    "intro": "Dynamic Arrays is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Dynamic Arrays",
        "content": "This section provides a basic explanation of Dynamic Arrays, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Dynamic Arrays",
        "content": "Let's look at how Dynamic Arrays is applied in real-world scenarios. We'll walk through code that uses Dynamic Arrays effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Dynamic Arrays?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Dynamic Arrays is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Dynamic Arrays?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Dynamic Arrays implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Dynamic Arrays commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Dynamic Arrays early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Dynamic Arrays early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Dynamic Arrays is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Dynamic Arrays?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Dynamic Arrays is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdb6"
  },
  "conceptId": "strings",
  "title": "Strings",
  "description": "Description for Strings.",
  "videoUrl": "https://dummyurl.com/video/strings",
  "prerequisites": [],
  "content": {
    "intro": "Strings is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Strings",
        "content": "This section provides a basic explanation of Strings, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Strings",
        "content": "Let's look at how Strings is applied in real-world scenarios. We'll walk through code that uses Strings effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Strings?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Strings is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Strings?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Strings implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Strings commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Strings early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Strings early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Strings is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Strings?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Strings is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdb7"
  },
  "conceptId": "string_operations",
  "title": "String Operations",
  "description": "Description for String Operations.",
  "videoUrl": "https://dummyurl.com/video/string_operations",
  "prerequisites": [],
  "content": {
    "intro": "String Operations is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of String Operations",
        "content": "This section provides a basic explanation of String Operations, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of String Operations",
        "content": "Let's look at how String Operations is applied in real-world scenarios. We'll walk through code that uses String Operations effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of String Operations?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "String Operations is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about String Operations?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "String Operations implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is String Operations commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning String Operations early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn String Operations early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "String Operations is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to String Operations?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "String Operations is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdb8"
  },
  "conceptId": "string_matching",
  "title": "String Matching",
  "description": "Description for String Matching.",
  "videoUrl": "https://dummyurl.com/video/string_matching",
  "prerequisites": [],
  "content": {
    "intro": "String Matching is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of String Matching",
        "content": "This section provides a basic explanation of String Matching, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of String Matching",
        "content": "Let's look at how String Matching is applied in real-world scenarios. We'll walk through code that uses String Matching effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of String Matching?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "String Matching is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about String Matching?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "String Matching implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is String Matching commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning String Matching early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn String Matching early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "String Matching is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to String Matching?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "String Matching is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdb9"
  },
  "conceptId": "linked_list",
  "title": "Linked List",
  "description": "Description for Linked List.",
  "videoUrl": "https://dummyurl.com/video/linked_list",
  "prerequisites": [],
  "content": {
    "intro": "Linked List is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Linked List",
        "content": "This section provides a basic explanation of Linked List, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Linked List",
        "content": "Let's look at how Linked List is applied in real-world scenarios. We'll walk through code that uses Linked List effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Linked List?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Linked List is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Linked List?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Linked List implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Linked List commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Linked List early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Linked List early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Linked List is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Linked List?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Linked List is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdba"
  },
  "conceptId": "singly_linked_list",
  "title": "Singly Linked List",
  "description": "Description for Singly Linked List.",
  "videoUrl": "https://dummyurl.com/video/singly_linked_list",
  "prerequisites": [],
  "content": {
    "intro": "Singly Linked List is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Singly Linked List",
        "content": "This section provides a basic explanation of Singly Linked List, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Singly Linked List",
        "content": "Let's look at how Singly Linked List is applied in real-world scenarios. We'll walk through code that uses Singly Linked List effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Singly Linked List?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Singly Linked List is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Singly Linked List?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Singly Linked List implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Singly Linked List commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Singly Linked List early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Singly Linked List early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Singly Linked List is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Singly Linked List?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Singly Linked List is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdbb"
  },
  "conceptId": "doubly_linked_list",
  "title": "Doubly Linked List",
  "description": "Description for Doubly Linked List.",
  "videoUrl": "https://dummyurl.com/video/doubly_linked_list",
  "prerequisites": [],
  "content": {
    "intro": "Doubly Linked List is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Doubly Linked List",
        "content": "This section provides a basic explanation of Doubly Linked List, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Doubly Linked List",
        "content": "Let's look at how Doubly Linked List is applied in real-world scenarios. We'll walk through code that uses Doubly Linked List effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Doubly Linked List?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Doubly Linked List is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Doubly Linked List?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Doubly Linked List implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Doubly Linked List commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Doubly Linked List early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Doubly Linked List early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Doubly Linked List is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Doubly Linked List?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Doubly Linked List is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdbc"
  },
  "conceptId": "circular_linked_list",
  "title": "Circular Linked List",
  "description": "Description for Circular Linked List.",
  "videoUrl": "https://dummyurl.com/video/circular_linked_list",
  "prerequisites": [],
  "content": {
    "intro": "Circular Linked List is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Circular Linked List",
        "content": "This section provides a basic explanation of Circular Linked List, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Circular Linked List",
        "content": "Let's look at how Circular Linked List is applied in real-world scenarios. We'll walk through code that uses Circular Linked List effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Circular Linked List?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Circular Linked List is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Circular Linked List?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Circular Linked List implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Circular Linked List commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Circular Linked List early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Circular Linked List early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Circular Linked List is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Circular Linked List?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Circular Linked List is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdbd"
  },
  "conceptId": "stack",
  "title": "Stack",
  "description": "Description for Stack.",
  "videoUrl": "https://dummyurl.com/video/stack",
  "prerequisites": [],
  "content": {
    "intro": "Stack is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Stack",
        "content": "This section provides a basic explanation of Stack, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Stack",
        "content": "Let's look at how Stack is applied in real-world scenarios. We'll walk through code that uses Stack effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Stack?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Stack is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Stack?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Stack implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Stack commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Stack early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Stack early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Stack is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Stack?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Stack is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdbe"
  },
  "conceptId": "queue",
  "title": "Queue",
  "description": "Description for Queue.",
  "videoUrl": "https://dummyurl.com/video/queue",
  "prerequisites": [],
  "content": {
    "intro": "Queue is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Queue",
        "content": "This section provides a basic explanation of Queue, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Queue",
        "content": "Let's look at how Queue is applied in real-world scenarios. We'll walk through code that uses Queue effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Queue?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Queue is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Queue?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Queue implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Queue commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Queue early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Queue early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Queue is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Queue?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Queue is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdbf"
  },
  "conceptId": "priority_queue",
  "title": "Priority Queue",
  "description": "Description for Priority Queue.",
  "videoUrl": "https://dummyurl.com/video/priority_queue",
  "prerequisites": [],
  "content": {
    "intro": "Priority Queue is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Priority Queue",
        "content": "This section provides a basic explanation of Priority Queue, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Priority Queue",
        "content": "Let's look at how Priority Queue is applied in real-world scenarios. We'll walk through code that uses Priority Queue effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Priority Queue?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Priority Queue is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Priority Queue?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Priority Queue implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Priority Queue commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Priority Queue early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Priority Queue early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Priority Queue is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Priority Queue?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Priority Queue is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdc0"
  },
  "conceptId": "deque",
  "title": "Deque",
  "description": "Description for Deque.",
  "videoUrl": "https://dummyurl.com/video/deque",
  "prerequisites": [],
  "content": {
    "intro": "Deque is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Deque",
        "content": "This section provides a basic explanation of Deque, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Deque",
        "content": "Let's look at how Deque is applied in real-world scenarios. We'll walk through code that uses Deque effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Deque?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Deque is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Deque?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Deque implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Deque commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Deque early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Deque early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Deque is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Deque?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Deque is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdc1"
  },
  "conceptId": "hashing",
  "title": "Hashing",
  "description": "Description for Hashing.",
  "videoUrl": "https://dummyurl.com/video/hashing",
  "prerequisites": [],
  "content": {
    "intro": "Hashing is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Hashing",
        "content": "This section provides a basic explanation of Hashing, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Hashing",
        "content": "Let's look at how Hashing is applied in real-world scenarios. We'll walk through code that uses Hashing effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Hashing?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Hashing is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Hashing?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Hashing implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Hashing commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Hashing early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Hashing early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Hashing is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Hashing?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Hashing is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdc2"
  },
  "conceptId": "hash_maps",
  "title": "Hash Maps",
  "description": "Description for Hash Maps.",
  "videoUrl": "https://dummyurl.com/video/hash_maps",
  "prerequisites": [],
  "content": {
    "intro": "Hash Maps is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Hash Maps",
        "content": "This section provides a basic explanation of Hash Maps, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Hash Maps",
        "content": "Let's look at how Hash Maps is applied in real-world scenarios. We'll walk through code that uses Hash Maps effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Hash Maps?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Hash Maps is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Hash Maps?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Hash Maps implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Hash Maps commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Hash Maps early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Hash Maps early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Hash Maps is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Hash Maps?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Hash Maps is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdc3"
  },
  "conceptId": "hash_sets",
  "title": "Hash Sets",
  "description": "Description for Hash Sets.",
  "videoUrl": "https://dummyurl.com/video/hash_sets",
  "prerequisites": [],
  "content": {
    "intro": "Hash Sets is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Hash Sets",
        "content": "This section provides a basic explanation of Hash Sets, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Hash Sets",
        "content": "Let's look at how Hash Sets is applied in real-world scenarios. We'll walk through code that uses Hash Sets effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Hash Sets?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Hash Sets is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Hash Sets?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Hash Sets implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Hash Sets commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Hash Sets early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Hash Sets early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Hash Sets is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Hash Sets?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Hash Sets is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdc4"
  },
  "conceptId": "trees",
  "title": "Trees",
  "description": "Description for Trees.",
  "videoUrl": "https://dummyurl.com/video/trees",
  "prerequisites": [],
  "content": {
    "intro": "Trees is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Trees",
        "content": "This section provides a basic explanation of Trees, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Trees",
        "content": "Let's look at how Trees is applied in real-world scenarios. We'll walk through code that uses Trees effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Trees?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Trees is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Trees?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Trees implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Trees commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Trees early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Trees early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Trees is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Trees?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Trees is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdc5"
  },
  "conceptId": "binary_tree",
  "title": "Binary Tree",
  "description": "Description for Binary Tree.",
  "videoUrl": "https://dummyurl.com/video/binary_tree",
  "prerequisites": [],
  "content": {
    "intro": "Binary Tree is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Binary Tree",
        "content": "This section provides a basic explanation of Binary Tree, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Binary Tree",
        "content": "Let's look at how Binary Tree is applied in real-world scenarios. We'll walk through code that uses Binary Tree effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Binary Tree?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Binary Tree is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Binary Tree?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Binary Tree implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Binary Tree commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Binary Tree early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Binary Tree early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Binary Tree is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Binary Tree?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Binary Tree is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdc6"
  },
  "conceptId": "binary_search_tree",
  "title": "Binary Search Tree",
  "description": "Description for Binary Search Tree.",
  "videoUrl": "https://dummyurl.com/video/binary_search_tree",
  "prerequisites": [],
  "content": {
    "intro": "Binary Search Tree is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Binary Search Tree",
        "content": "This section provides a basic explanation of Binary Search Tree, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Binary Search Tree",
        "content": "Let's look at how Binary Search Tree is applied in real-world scenarios. We'll walk through code that uses Binary Search Tree effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Binary Search Tree?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Binary Search Tree is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Binary Search Tree?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Binary Search Tree implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Binary Search Tree commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Binary Search Tree early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Binary Search Tree early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Binary Search Tree is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Binary Search Tree?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Binary Search Tree is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdc7"
  },
  "conceptId": "avl_tree",
  "title": "AVL Tree",
  "description": "Description for AVL Tree.",
  "videoUrl": "https://dummyurl.com/video/avl_tree",
  "prerequisites": [],
  "content": {
    "intro": "AVL Tree is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of AVL Tree",
        "content": "This section provides a basic explanation of AVL Tree, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of AVL Tree",
        "content": "Let's look at how AVL Tree is applied in real-world scenarios. We'll walk through code that uses AVL Tree effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of AVL Tree?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "AVL Tree is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about AVL Tree?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "AVL Tree implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is AVL Tree commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning AVL Tree early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn AVL Tree early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "AVL Tree is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to AVL Tree?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "AVL Tree is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdc8"
  },
  "conceptId": "red_black_tree",
  "title": "Red-Black Tree",
  "description": "Description for Red-Black Tree.",
  "videoUrl": "https://dummyurl.com/video/red_black_tree",
  "prerequisites": [],
  "content": {
    "intro": "Red-Black Tree is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Red-Black Tree",
        "content": "This section provides a basic explanation of Red-Black Tree, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Red-Black Tree",
        "content": "Let's look at how Red-Black Tree is applied in real-world scenarios. We'll walk through code that uses Red-Black Tree effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Red-Black Tree?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Red-Black Tree is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Red-Black Tree?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Red-Black Tree implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Red-Black Tree commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Red-Black Tree early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Red-Black Tree early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Red-Black Tree is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Red-Black Tree?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Red-Black Tree is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdc9"
  },
  "conceptId": "segment_tree",
  "title": "Segment Tree",
  "description": "Description for Segment Tree.",
  "videoUrl": "https://dummyurl.com/video/segment_tree",
  "prerequisites": [],
  "content": {
    "intro": "Segment Tree is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Segment Tree",
        "content": "This section provides a basic explanation of Segment Tree, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Segment Tree",
        "content": "Let's look at how Segment Tree is applied in real-world scenarios. We'll walk through code that uses Segment Tree effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Segment Tree?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Segment Tree is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Segment Tree?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Segment Tree implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Segment Tree commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Segment Tree early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Segment Tree early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Segment Tree is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Segment Tree?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Segment Tree is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdca"
  },
  "conceptId": "fenwick_tree",
  "title": "Fenwick Tree",
  "description": "Description for Fenwick Tree.",
  "videoUrl": "https://dummyurl.com/video/fenwick_tree",
  "prerequisites": [],
  "content": {
    "intro": "Fenwick Tree is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Fenwick Tree",
        "content": "This section provides a basic explanation of Fenwick Tree, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Fenwick Tree",
        "content": "Let's look at how Fenwick Tree is applied in real-world scenarios. We'll walk through code that uses Fenwick Tree effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Fenwick Tree?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Fenwick Tree is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Fenwick Tree?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Fenwick Tree implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Fenwick Tree commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Fenwick Tree early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Fenwick Tree early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Fenwick Tree is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Fenwick Tree?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Fenwick Tree is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdcb"
  },
  "conceptId": "trie",
  "title": "Trie",
  "description": "Description for Trie.",
  "videoUrl": "https://dummyurl.com/video/trie",
  "prerequisites": [],
  "content": {
    "intro": "Trie is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Trie",
        "content": "This section provides a basic explanation of Trie, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Trie",
        "content": "Let's look at how Trie is applied in real-world scenarios. We'll walk through code that uses Trie effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Trie?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Trie is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Trie?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Trie implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Trie commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Trie early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Trie early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Trie is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Trie?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Trie is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdcc"
  },
  "conceptId": "heap",
  "title": "Heap",
  "description": "Description for Heap.",
  "videoUrl": "https://dummyurl.com/video/heap",
  "prerequisites": [],
  "content": {
    "intro": "Heap is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Heap",
        "content": "This section provides a basic explanation of Heap, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Heap",
        "content": "Let's look at how Heap is applied in real-world scenarios. We'll walk through code that uses Heap effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Heap?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Heap is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Heap?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Heap implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Heap commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Heap early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Heap early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Heap is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Heap?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Heap is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdcd"
  },
  "conceptId": "graphs",
  "title": "Graphs",
  "description": "Description for Graphs.",
  "videoUrl": "https://dummyurl.com/video/graphs",
  "prerequisites": [],
  "content": {
    "intro": "Graphs is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Graphs",
        "content": "This section provides a basic explanation of Graphs, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Graphs",
        "content": "Let's look at how Graphs is applied in real-world scenarios. We'll walk through code that uses Graphs effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Graphs?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Graphs is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Graphs?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Graphs implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Graphs commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Graphs early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Graphs early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Graphs is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Graphs?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Graphs is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdce"
  },
  "conceptId": "directed_graph",
  "title": "Directed Graph",
  "description": "Description for Directed Graph.",
  "videoUrl": "https://dummyurl.com/video/directed_graph",
  "prerequisites": [],
  "content": {
    "intro": "Directed Graph is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Directed Graph",
        "content": "This section provides a basic explanation of Directed Graph, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Directed Graph",
        "content": "Let's look at how Directed Graph is applied in real-world scenarios. We'll walk through code that uses Directed Graph effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Directed Graph?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Directed Graph is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Directed Graph?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Directed Graph implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Directed Graph commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Directed Graph early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Directed Graph early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Directed Graph is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Directed Graph?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Directed Graph is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdcf"
  },
  "conceptId": "undirected_graph",
  "title": "Undirected Graph",
  "description": "Description for Undirected Graph.",
  "videoUrl": "https://dummyurl.com/video/undirected_graph",
  "prerequisites": [],
  "content": {
    "intro": "Undirected Graph is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Undirected Graph",
        "content": "This section provides a basic explanation of Undirected Graph, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Undirected Graph",
        "content": "Let's look at how Undirected Graph is applied in real-world scenarios. We'll walk through code that uses Undirected Graph effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Undirected Graph?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Undirected Graph is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Undirected Graph?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Undirected Graph implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Undirected Graph commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Undirected Graph early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Undirected Graph early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Undirected Graph is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Undirected Graph?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Undirected Graph is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdd0"
  },
  "conceptId": "weighted_graph",
  "title": "Weighted Graph",
  "description": "Description for Weighted Graph.",
  "videoUrl": "https://dummyurl.com/video/weighted_graph",
  "prerequisites": [],
  "content": {
    "intro": "Weighted Graph is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Weighted Graph",
        "content": "This section provides a basic explanation of Weighted Graph, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Weighted Graph",
        "content": "Let's look at how Weighted Graph is applied in real-world scenarios. We'll walk through code that uses Weighted Graph effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Weighted Graph?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Weighted Graph is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Weighted Graph?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Weighted Graph implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Weighted Graph commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Weighted Graph early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Weighted Graph early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Weighted Graph is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Weighted Graph?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Weighted Graph is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdd1"
  },
  "conceptId": "unweighted_graph",
  "title": "Unweighted Graph",
  "description": "Description for Unweighted Graph.",
  "videoUrl": "https://dummyurl.com/video/unweighted_graph",
  "prerequisites": [],
  "content": {
    "intro": "Unweighted Graph is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Unweighted Graph",
        "content": "This section provides a basic explanation of Unweighted Graph, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Unweighted Graph",
        "content": "Let's look at how Unweighted Graph is applied in real-world scenarios. We'll walk through code that uses Unweighted Graph effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Unweighted Graph?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Unweighted Graph is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Unweighted Graph?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Unweighted Graph implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Unweighted Graph commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Unweighted Graph early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Unweighted Graph early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Unweighted Graph is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Unweighted Graph?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Unweighted Graph is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdd2"
  },
  "conceptId": "dfs",
  "title": "DFS",
  "description": "Description for DFS.",
  "videoUrl": "https://dummyurl.com/video/dfs",
  "prerequisites": [],
  "content": {
    "intro": "DFS is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of DFS",
        "content": "This section provides a basic explanation of DFS, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of DFS",
        "content": "Let's look at how DFS is applied in real-world scenarios. We'll walk through code that uses DFS effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of DFS?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "DFS is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about DFS?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "DFS implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is DFS commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning DFS early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn DFS early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "DFS is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to DFS?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "DFS is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "graph algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdd3"
  },
  "conceptId": "bfs",
  "title": "BFS",
  "description": "Description for BFS.",
  "videoUrl": "https://dummyurl.com/video/bfs",
  "prerequisites": [],
  "content": {
    "intro": "BFS is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of BFS",
        "content": "This section provides a basic explanation of BFS, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of BFS",
        "content": "Let's look at how BFS is applied in real-world scenarios. We'll walk through code that uses BFS effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of BFS?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "BFS is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about BFS?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "BFS implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is BFS commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning BFS early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn BFS early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "BFS is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to BFS?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "BFS is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "graph algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdd4"
  },
  "conceptId": "dijkstra",
  "title": "Dijkstra",
  "description": "Description for Dijkstra.",
  "videoUrl": "https://dummyurl.com/video/dijkstra",
  "prerequisites": [],
  "content": {
    "intro": "Dijkstra is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Dijkstra",
        "content": "This section provides a basic explanation of Dijkstra, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Dijkstra",
        "content": "Let's look at how Dijkstra is applied in real-world scenarios. We'll walk through code that uses Dijkstra effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Dijkstra?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Dijkstra is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Dijkstra?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Dijkstra implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Dijkstra commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Dijkstra early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Dijkstra early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Dijkstra is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Dijkstra?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Dijkstra is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "graph algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdd5"
  },
  "conceptId": "floyd_warshall",
  "title": "Floyd-Warshall",
  "description": "Description for Floyd-Warshall.",
  "videoUrl": "https://dummyurl.com/video/floyd_warshall",
  "prerequisites": [],
  "content": {
    "intro": "Floyd-Warshall is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Floyd-Warshall",
        "content": "This section provides a basic explanation of Floyd-Warshall, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Floyd-Warshall",
        "content": "Let's look at how Floyd-Warshall is applied in real-world scenarios. We'll walk through code that uses Floyd-Warshall effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Floyd-Warshall?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Floyd-Warshall is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Floyd-Warshall?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Floyd-Warshall implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Floyd-Warshall commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Floyd-Warshall early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Floyd-Warshall early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Floyd-Warshall is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Floyd-Warshall?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Floyd-Warshall is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "graph algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdd6"
  },
  "conceptId": "bellman_ford",
  "title": "Bellman-Ford",
  "description": "Description for Bellman-Ford.",
  "videoUrl": "https://dummyurl.com/video/bellman_ford",
  "prerequisites": [],
  "content": {
    "intro": "Bellman-Ford is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Bellman-Ford",
        "content": "This section provides a basic explanation of Bellman-Ford, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Bellman-Ford",
        "content": "Let's look at how Bellman-Ford is applied in real-world scenarios. We'll walk through code that uses Bellman-Ford effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Bellman-Ford?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Bellman-Ford is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Bellman-Ford?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Bellman-Ford implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Bellman-Ford commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Bellman-Ford early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Bellman-Ford early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Bellman-Ford is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Bellman-Ford?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Bellman-Ford is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "graph algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdd7"
  },
  "conceptId": "topological_sort",
  "title": "Topological Sort",
  "description": "Description for Topological Sort.",
  "videoUrl": "https://dummyurl.com/video/topological_sort",
  "prerequisites": [],
  "content": {
    "intro": "Topological Sort is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Topological Sort",
        "content": "This section provides a basic explanation of Topological Sort, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Topological Sort",
        "content": "Let's look at how Topological Sort is applied in real-world scenarios. We'll walk through code that uses Topological Sort effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Topological Sort?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Topological Sort is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Topological Sort?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Topological Sort implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Topological Sort commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Topological Sort early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Topological Sort early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Topological Sort is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Topological Sort?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Topological Sort is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "graph algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdd8"
  },
  "conceptId": "kruskal_s_algorithm",
  "title": "Kruskal's Algorithm",
  "description": "Description for Kruskal's Algorithm.",
  "videoUrl": "https://dummyurl.com/video/kruskal_s_algorithm",
  "prerequisites": [],
  "content": {
    "intro": "Kruskal's Algorithm is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Kruskal's Algorithm",
        "content": "This section provides a basic explanation of Kruskal's Algorithm, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Kruskal's Algorithm",
        "content": "Let's look at how Kruskal's Algorithm is applied in real-world scenarios. We'll walk through code that uses Kruskal's Algorithm effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Kruskal's Algorithm?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Kruskal's Algorithm is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Kruskal's Algorithm?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Kruskal's Algorithm implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Kruskal's Algorithm commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Kruskal's Algorithm early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Kruskal's Algorithm early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Kruskal's Algorithm is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Kruskal's Algorithm?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Kruskal's Algorithm is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "graph algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdd9"
  },
  "conceptId": "prim_s_algorithm",
  "title": "Prim's Algorithm",
  "description": "Description for Prim's Algorithm.",
  "videoUrl": "https://dummyurl.com/video/prim_s_algorithm",
  "prerequisites": [],
  "content": {
    "intro": "Prim's Algorithm is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Prim's Algorithm",
        "content": "This section provides a basic explanation of Prim's Algorithm, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Prim's Algorithm",
        "content": "Let's look at how Prim's Algorithm is applied in real-world scenarios. We'll walk through code that uses Prim's Algorithm effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Prim's Algorithm?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Prim's Algorithm is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Prim's Algorithm?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Prim's Algorithm implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Prim's Algorithm commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Prim's Algorithm early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Prim's Algorithm early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Prim's Algorithm is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Prim's Algorithm?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Prim's Algorithm is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "graph algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdda"
  },
  "conceptId": "disjoint_set",
  "title": "Disjoint Set",
  "description": "Description for Disjoint Set.",
  "videoUrl": "https://dummyurl.com/video/disjoint_set",
  "prerequisites": [],
  "content": {
    "intro": "Disjoint Set is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Disjoint Set",
        "content": "This section provides a basic explanation of Disjoint Set, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Disjoint Set",
        "content": "Let's look at how Disjoint Set is applied in real-world scenarios. We'll walk through code that uses Disjoint Set effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Disjoint Set?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Disjoint Set is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Disjoint Set?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Disjoint Set implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Disjoint Set commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Disjoint Set early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Disjoint Set early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Disjoint Set is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Disjoint Set?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Disjoint Set is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "graph algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfddb"
  },
  "conceptId": "searching",
  "title": "Searching",
  "description": "Description for Searching.",
  "videoUrl": "https://dummyurl.com/video/searching",
  "prerequisites": [],
  "content": {
    "intro": "Searching is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Searching",
        "content": "This section provides a basic explanation of Searching, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Searching",
        "content": "Let's look at how Searching is applied in real-world scenarios. We'll walk through code that uses Searching effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Searching?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Searching is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Searching?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Searching implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Searching commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Searching early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Searching early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Searching is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Searching?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Searching is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfddc"
  },
  "conceptId": "linear_search",
  "title": "Linear Search",
  "description": "Description for Linear Search.",
  "videoUrl": "https://dummyurl.com/video/linear_search",
  "prerequisites": [],
  "content": {
    "intro": "Linear Search is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Linear Search",
        "content": "This section provides a basic explanation of Linear Search, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Linear Search",
        "content": "Let's look at how Linear Search is applied in real-world scenarios. We'll walk through code that uses Linear Search effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Linear Search?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Linear Search is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Linear Search?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Linear Search implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Linear Search commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Linear Search early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Linear Search early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Linear Search is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Linear Search?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Linear Search is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfddd"
  },
  "conceptId": "binary_search",
  "title": "Binary Search",
  "description": "Description for Binary Search.",
  "videoUrl": "https://dummyurl.com/video/binary_search",
  "prerequisites": [],
  "content": {
    "intro": "Binary Search is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Binary Search",
        "content": "This section provides a basic explanation of Binary Search, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Binary Search",
        "content": "Let's look at how Binary Search is applied in real-world scenarios. We'll walk through code that uses Binary Search effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Binary Search?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Binary Search is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Binary Search?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Binary Search implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Binary Search commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Binary Search early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Binary Search early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Binary Search is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Binary Search?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Binary Search is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdde"
  },
  "conceptId": "sorting",
  "title": "Sorting",
  "description": "Description for Sorting.",
  "videoUrl": "https://dummyurl.com/video/sorting",
  "prerequisites": [],
  "content": {
    "intro": "Sorting is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Sorting",
        "content": "This section provides a basic explanation of Sorting, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Sorting",
        "content": "Let's look at how Sorting is applied in real-world scenarios. We'll walk through code that uses Sorting effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Sorting?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Sorting is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Sorting?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Sorting implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Sorting commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Sorting early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Sorting early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Sorting is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Sorting?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Sorting is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfddf"
  },
  "conceptId": "bubble_sort",
  "title": "Bubble Sort",
  "description": "Description for Bubble Sort.",
  "videoUrl": "https://dummyurl.com/video/bubble_sort",
  "prerequisites": [],
  "content": {
    "intro": "Bubble Sort is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Bubble Sort",
        "content": "This section provides a basic explanation of Bubble Sort, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Bubble Sort",
        "content": "Let's look at how Bubble Sort is applied in real-world scenarios. We'll walk through code that uses Bubble Sort effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Bubble Sort?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Bubble Sort is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Bubble Sort?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Bubble Sort implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Bubble Sort commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Bubble Sort early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Bubble Sort early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Bubble Sort is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Bubble Sort?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Bubble Sort is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfde0"
  },
  "conceptId": "selection_sort",
  "title": "Selection Sort",
  "description": "Description for Selection Sort.",
  "videoUrl": "https://dummyurl.com/video/selection_sort",
  "prerequisites": [],
  "content": {
    "intro": "Selection Sort is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Selection Sort",
        "content": "This section provides a basic explanation of Selection Sort, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Selection Sort",
        "content": "Let's look at how Selection Sort is applied in real-world scenarios. We'll walk through code that uses Selection Sort effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Selection Sort?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Selection Sort is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Selection Sort?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Selection Sort implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Selection Sort commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Selection Sort early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Selection Sort early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Selection Sort is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Selection Sort?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Selection Sort is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfde1"
  },
  "conceptId": "insertion_sort",
  "title": "Insertion Sort",
  "description": "Description for Insertion Sort.",
  "videoUrl": "https://dummyurl.com/video/insertion_sort",
  "prerequisites": [],
  "content": {
    "intro": "Insertion Sort is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Insertion Sort",
        "content": "This section provides a basic explanation of Insertion Sort, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Insertion Sort",
        "content": "Let's look at how Insertion Sort is applied in real-world scenarios. We'll walk through code that uses Insertion Sort effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Insertion Sort?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Insertion Sort is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Insertion Sort?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Insertion Sort implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Insertion Sort commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Insertion Sort early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Insertion Sort early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Insertion Sort is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Insertion Sort?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Insertion Sort is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfde2"
  },
  "conceptId": "merge_sort",
  "title": "Merge Sort",
  "description": "Description for Merge Sort.",
  "videoUrl": "https://dummyurl.com/video/merge_sort",
  "prerequisites": [],
  "content": {
    "intro": "Merge Sort is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Merge Sort",
        "content": "This section provides a basic explanation of Merge Sort, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Merge Sort",
        "content": "Let's look at how Merge Sort is applied in real-world scenarios. We'll walk through code that uses Merge Sort effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Merge Sort?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Merge Sort is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Merge Sort?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Merge Sort implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Merge Sort commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Merge Sort early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Merge Sort early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Merge Sort is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Merge Sort?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Merge Sort is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfde3"
  },
  "conceptId": "quick_sort",
  "title": "Quick Sort",
  "description": "Description for Quick Sort.",
  "videoUrl": "https://dummyurl.com/video/quick_sort",
  "prerequisites": [],
  "content": {
    "intro": "Quick Sort is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Quick Sort",
        "content": "This section provides a basic explanation of Quick Sort, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Quick Sort",
        "content": "Let's look at how Quick Sort is applied in real-world scenarios. We'll walk through code that uses Quick Sort effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Quick Sort?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Quick Sort is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Quick Sort?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Quick Sort implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Quick Sort commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Quick Sort early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Quick Sort early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Quick Sort is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Quick Sort?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Quick Sort is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfde4"
  },
  "conceptId": "heap_sort",
  "title": "Heap Sort",
  "description": "Description for Heap Sort.",
  "videoUrl": "https://dummyurl.com/video/heap_sort",
  "prerequisites": [],
  "content": {
    "intro": "Heap Sort is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Heap Sort",
        "content": "This section provides a basic explanation of Heap Sort, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Heap Sort",
        "content": "Let's look at how Heap Sort is applied in real-world scenarios. We'll walk through code that uses Heap Sort effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Heap Sort?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Heap Sort is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Heap Sort?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Heap Sort implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Heap Sort commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Heap Sort early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Heap Sort early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Heap Sort is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Heap Sort?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Heap Sort is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfde5"
  },
  "conceptId": "recursion",
  "title": "Recursion",
  "description": "Description for Recursion.",
  "videoUrl": "https://dummyurl.com/video/recursion",
  "prerequisites": [],
  "content": {
    "intro": "Recursion is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Recursion",
        "content": "This section provides a basic explanation of Recursion, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Recursion",
        "content": "Let's look at how Recursion is applied in real-world scenarios. We'll walk through code that uses Recursion effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Recursion?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Recursion is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Recursion?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Recursion implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Recursion commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Recursion early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Recursion early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Recursion is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Recursion?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Recursion is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfde6"
  },
  "conceptId": "backtracking",
  "title": "Backtracking",
  "description": "Description for Backtracking.",
  "videoUrl": "https://dummyurl.com/video/backtracking",
  "prerequisites": [],
  "content": {
    "intro": "Backtracking is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Backtracking",
        "content": "This section provides a basic explanation of Backtracking, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Backtracking",
        "content": "Let's look at how Backtracking is applied in real-world scenarios. We'll walk through code that uses Backtracking effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Backtracking?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Backtracking is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Backtracking?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Backtracking implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Backtracking commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Backtracking early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Backtracking early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Backtracking is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Backtracking?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Backtracking is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfde7"
  },
  "conceptId": "divide_and_conquer",
  "title": "Divide and Conquer",
  "description": "Description for Divide and Conquer.",
  "videoUrl": "https://dummyurl.com/video/divide_and_conquer",
  "prerequisites": [],
  "content": {
    "intro": "Divide and Conquer is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Divide and Conquer",
        "content": "This section provides a basic explanation of Divide and Conquer, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Divide and Conquer",
        "content": "Let's look at how Divide and Conquer is applied in real-world scenarios. We'll walk through code that uses Divide and Conquer effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Divide and Conquer?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Divide and Conquer is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Divide and Conquer?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Divide and Conquer implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Divide and Conquer commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Divide and Conquer early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Divide and Conquer early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Divide and Conquer is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Divide and Conquer?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Divide and Conquer is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfde8"
  },
  "conceptId": "greedy",
  "title": "Greedy",
  "description": "Description for Greedy.",
  "videoUrl": "https://dummyurl.com/video/greedy",
  "prerequisites": [],
  "content": {
    "intro": "Greedy is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Greedy",
        "content": "This section provides a basic explanation of Greedy, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Greedy",
        "content": "Let's look at how Greedy is applied in real-world scenarios. We'll walk through code that uses Greedy effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Greedy?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Greedy is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Greedy?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Greedy implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Greedy commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Greedy early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Greedy early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Greedy is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Greedy?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Greedy is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfde9"
  },
  "conceptId": "dynamic_programming",
  "title": "Dynamic Programming",
  "description": "Description for Dynamic Programming.",
  "videoUrl": "https://dummyurl.com/video/dynamic_programming",
  "prerequisites": [],
  "content": {
    "intro": "Dynamic Programming is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Dynamic Programming",
        "content": "This section provides a basic explanation of Dynamic Programming, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Dynamic Programming",
        "content": "Let's look at how Dynamic Programming is applied in real-world scenarios. We'll walk through code that uses Dynamic Programming effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Dynamic Programming?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Dynamic Programming is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Dynamic Programming?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Dynamic Programming implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Dynamic Programming commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Dynamic Programming early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Dynamic Programming early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Dynamic Programming is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Dynamic Programming?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Dynamic Programming is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdea"
  },
  "conceptId": "memoization",
  "title": "Memoization",
  "description": "Description for Memoization.",
  "videoUrl": "https://dummyurl.com/video/memoization",
  "prerequisites": [],
  "content": {
    "intro": "Memoization is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Memoization",
        "content": "This section provides a basic explanation of Memoization, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Memoization",
        "content": "Let's look at how Memoization is applied in real-world scenarios. We'll walk through code that uses Memoization effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Memoization?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Memoization is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Memoization?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Memoization implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Memoization commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Memoization early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Memoization early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Memoization is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Memoization?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Memoization is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdeb"
  },
  "conceptId": "tabulation",
  "title": "Tabulation",
  "description": "Description for Tabulation.",
  "videoUrl": "https://dummyurl.com/video/tabulation",
  "prerequisites": [],
  "content": {
    "intro": "Tabulation is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Tabulation",
        "content": "This section provides a basic explanation of Tabulation, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Tabulation",
        "content": "Let's look at how Tabulation is applied in real-world scenarios. We'll walk through code that uses Tabulation effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Tabulation?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Tabulation is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Tabulation?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Tabulation implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Tabulation commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Tabulation early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Tabulation early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Tabulation is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Tabulation?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Tabulation is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdec"
  },
  "conceptId": "bit_manipulation",
  "title": "Bit Manipulation",
  "description": "Description for Bit Manipulation.",
  "videoUrl": "https://dummyurl.com/video/bit_manipulation",
  "prerequisites": [],
  "content": {
    "intro": "Bit Manipulation is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Bit Manipulation",
        "content": "This section provides a basic explanation of Bit Manipulation, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Bit Manipulation",
        "content": "Let's look at how Bit Manipulation is applied in real-world scenarios. We'll walk through code that uses Bit Manipulation effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Bit Manipulation?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Bit Manipulation is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Bit Manipulation?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Bit Manipulation implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Bit Manipulation commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Bit Manipulation early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Bit Manipulation early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Bit Manipulation is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Bit Manipulation?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Bit Manipulation is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfded"
  },
  "conceptId": "number_theory",
  "title": "Number Theory",
  "description": "Description for Number Theory.",
  "videoUrl": "https://dummyurl.com/video/number_theory",
  "prerequisites": [],
  "content": {
    "intro": "Number Theory is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Number Theory",
        "content": "This section provides a basic explanation of Number Theory, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Number Theory",
        "content": "Let's look at how Number Theory is applied in real-world scenarios. We'll walk through code that uses Number Theory effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Number Theory?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Number Theory is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Number Theory?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Number Theory implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Number Theory commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Number Theory early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Number Theory early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Number Theory is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Number Theory?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Number Theory is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdee"
  },
  "conceptId": "n_ary_tree",
  "title": "N-ary Tree",
  "description": "Description for N-ary Tree.",
  "videoUrl": "https://dummyurl.com/video/n_ary_tree",
  "prerequisites": [],
  "content": {
    "intro": "N-ary Tree is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of N-ary Tree",
        "content": "This section provides a basic explanation of N-ary Tree, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of N-ary Tree",
        "content": "Let's look at how N-ary Tree is applied in real-world scenarios. We'll walk through code that uses N-ary Tree effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of N-ary Tree?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "N-ary Tree is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about N-ary Tree?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "N-ary Tree implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is N-ary Tree commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning N-ary Tree early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn N-ary Tree early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "N-ary Tree is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to N-ary Tree?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "N-ary Tree is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdef"
  },
  "conceptId": "b_trees",
  "title": "B-Trees",
  "description": "Description for B-Trees.",
  "videoUrl": "https://dummyurl.com/video/b_trees",
  "prerequisites": [],
  "content": {
    "intro": "B-Trees is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of B-Trees",
        "content": "This section provides a basic explanation of B-Trees, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of B-Trees",
        "content": "Let's look at how B-Trees is applied in real-world scenarios. We'll walk through code that uses B-Trees effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of B-Trees?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "B-Trees is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about B-Trees?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "B-Trees implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is B-Trees commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning B-Trees early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn B-Trees early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "B-Trees is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to B-Trees?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "B-Trees is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdf0"
  },
  "conceptId": "b_trees",
  "title": "B+ Trees",
  "description": "Description for B+ Trees.",
  "videoUrl": "https://dummyurl.com/video/b_trees",
  "prerequisites": [],
  "content": {
    "intro": "B+ Trees is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of B+ Trees",
        "content": "This section provides a basic explanation of B+ Trees, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of B+ Trees",
        "content": "Let's look at how B+ Trees is applied in real-world scenarios. We'll walk through code that uses B+ Trees effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of B+ Trees?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "B+ Trees is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about B+ Trees?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "B+ Trees implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is B+ Trees commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning B+ Trees early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn B+ Trees early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "B+ Trees is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to B+ Trees?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "B+ Trees is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdf1"
  },
  "conceptId": "threaded_binary_tree",
  "title": "Threaded Binary Tree",
  "description": "Description for Threaded Binary Tree.",
  "videoUrl": "https://dummyurl.com/video/threaded_binary_tree",
  "prerequisites": [],
  "content": {
    "intro": "Threaded Binary Tree is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Threaded Binary Tree",
        "content": "This section provides a basic explanation of Threaded Binary Tree, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Threaded Binary Tree",
        "content": "Let's look at how Threaded Binary Tree is applied in real-world scenarios. We'll walk through code that uses Threaded Binary Tree effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Threaded Binary Tree?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Threaded Binary Tree is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Threaded Binary Tree?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Threaded Binary Tree implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Threaded Binary Tree commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Threaded Binary Tree early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Threaded Binary Tree early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Threaded Binary Tree is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Threaded Binary Tree?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Threaded Binary Tree is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdf2"
  },
  "conceptId": "ternary_search_tree",
  "title": "Ternary Search Tree",
  "description": "Description for Ternary Search Tree.",
  "videoUrl": "https://dummyurl.com/video/ternary_search_tree",
  "prerequisites": [],
  "content": {
    "intro": "Ternary Search Tree is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Ternary Search Tree",
        "content": "This section provides a basic explanation of Ternary Search Tree, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Ternary Search Tree",
        "content": "Let's look at how Ternary Search Tree is applied in real-world scenarios. We'll walk through code that uses Ternary Search Tree effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Ternary Search Tree?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Ternary Search Tree is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Ternary Search Tree?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Ternary Search Tree implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Ternary Search Tree commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Ternary Search Tree early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Ternary Search Tree early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Ternary Search Tree is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Ternary Search Tree?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Ternary Search Tree is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdf3"
  },
  "conceptId": "segment_tree_with_lazy_propagation",
  "title": "Segment Tree with Lazy Propagation",
  "description": "Description for Segment Tree with Lazy Propagation.",
  "videoUrl": "https://dummyurl.com/video/segment_tree_with_lazy_propagation",
  "prerequisites": [],
  "content": {
    "intro": "Segment Tree with Lazy Propagation is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Segment Tree with Lazy Propagation",
        "content": "This section provides a basic explanation of Segment Tree with Lazy Propagation, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Segment Tree with Lazy Propagation",
        "content": "Let's look at how Segment Tree with Lazy Propagation is applied in real-world scenarios. We'll walk through code that uses Segment Tree with Lazy Propagation effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Segment Tree with Lazy Propagation?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Segment Tree with Lazy Propagation is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Segment Tree with Lazy Propagation?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Segment Tree with Lazy Propagation implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Segment Tree with Lazy Propagation commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Segment Tree with Lazy Propagation early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Segment Tree with Lazy Propagation early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Segment Tree with Lazy Propagation is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Segment Tree with Lazy Propagation?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Segment Tree with Lazy Propagation is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdf4"
  },
  "conceptId": "articulation_point",
  "title": "Articulation Point",
  "description": "Description for Articulation Point.",
  "videoUrl": "https://dummyurl.com/video/articulation_point",
  "prerequisites": [],
  "content": {
    "intro": "Articulation Point is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Articulation Point",
        "content": "This section provides a basic explanation of Articulation Point, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Articulation Point",
        "content": "Let's look at how Articulation Point is applied in real-world scenarios. We'll walk through code that uses Articulation Point effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Articulation Point?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Articulation Point is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Articulation Point?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Articulation Point implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Articulation Point commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Articulation Point early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Articulation Point early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Articulation Point is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Articulation Point?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Articulation Point is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "graph algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdf5"
  },
  "conceptId": "bridges_in_graph",
  "title": "Bridges in Graph",
  "description": "Description for Bridges in Graph.",
  "videoUrl": "https://dummyurl.com/video/bridges_in_graph",
  "prerequisites": [],
  "content": {
    "intro": "Bridges in Graph is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Bridges in Graph",
        "content": "This section provides a basic explanation of Bridges in Graph, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Bridges in Graph",
        "content": "Let's look at how Bridges in Graph is applied in real-world scenarios. We'll walk through code that uses Bridges in Graph effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Bridges in Graph?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Bridges in Graph is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Bridges in Graph?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Bridges in Graph implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Bridges in Graph commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Bridges in Graph early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Bridges in Graph early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Bridges in Graph is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Bridges in Graph?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Bridges in Graph is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "graph algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdf6"
  },
  "conceptId": "tarjan_s_algorithm",
  "title": "Tarjan’s Algorithm",
  "description": "Description for Tarjan’s Algorithm.",
  "videoUrl": "https://dummyurl.com/video/tarjan_s_algorithm",
  "prerequisites": [],
  "content": {
    "intro": "Tarjan’s Algorithm is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Tarjan’s Algorithm",
        "content": "This section provides a basic explanation of Tarjan’s Algorithm, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Tarjan’s Algorithm",
        "content": "Let's look at how Tarjan’s Algorithm is applied in real-world scenarios. We'll walk through code that uses Tarjan’s Algorithm effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Tarjan’s Algorithm?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Tarjan’s Algorithm is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Tarjan’s Algorithm?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Tarjan’s Algorithm implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Tarjan’s Algorithm commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Tarjan’s Algorithm early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Tarjan’s Algorithm early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Tarjan’s Algorithm is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Tarjan’s Algorithm?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Tarjan’s Algorithm is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "graph algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdf7"
  },
  "conceptId": "kosaraju_s_algorithm",
  "title": "Kosaraju’s Algorithm",
  "description": "Description for Kosaraju’s Algorithm.",
  "videoUrl": "https://dummyurl.com/video/kosaraju_s_algorithm",
  "prerequisites": [],
  "content": {
    "intro": "Kosaraju’s Algorithm is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Kosaraju’s Algorithm",
        "content": "This section provides a basic explanation of Kosaraju’s Algorithm, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Kosaraju’s Algorithm",
        "content": "Let's look at how Kosaraju’s Algorithm is applied in real-world scenarios. We'll walk through code that uses Kosaraju’s Algorithm effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Kosaraju’s Algorithm?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Kosaraju’s Algorithm is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Kosaraju’s Algorithm?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Kosaraju’s Algorithm implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Kosaraju’s Algorithm commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Kosaraju’s Algorithm early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Kosaraju’s Algorithm early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Kosaraju’s Algorithm is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Kosaraju’s Algorithm?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Kosaraju’s Algorithm is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "graph algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdf8"
  },
  "conceptId": "strongly_connected_components_scc",
  "title": "Strongly Connected Components (SCC)",
  "description": "Description for Strongly Connected Components (SCC).",
  "videoUrl": "https://dummyurl.com/video/strongly_connected_components_scc",
  "prerequisites": [],
  "content": {
    "intro": "Strongly Connected Components (SCC) is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Strongly Connected Components (SCC)",
        "content": "This section provides a basic explanation of Strongly Connected Components (SCC), including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Strongly Connected Components (SCC)",
        "content": "Let's look at how Strongly Connected Components (SCC) is applied in real-world scenarios. We'll walk through code that uses Strongly Connected Components (SCC) effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Strongly Connected Components (SCC)?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Strongly Connected Components (SCC) is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Strongly Connected Components (SCC)?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Strongly Connected Components (SCC) implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Strongly Connected Components (SCC) commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Strongly Connected Components (SCC) early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Strongly Connected Components (SCC) early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Strongly Connected Components (SCC) is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Strongly Connected Components (SCC)?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Strongly Connected Components (SCC) is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "graph algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdf9"
  },
  "conceptId": "eulerian_path_circuit",
  "title": "Eulerian Path/Circuit",
  "description": "Description for Eulerian Path/Circuit.",
  "videoUrl": "https://dummyurl.com/video/eulerian_path_circuit",
  "prerequisites": [],
  "content": {
    "intro": "Eulerian Path/Circuit is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Eulerian Path/Circuit",
        "content": "This section provides a basic explanation of Eulerian Path/Circuit, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Eulerian Path/Circuit",
        "content": "Let's look at how Eulerian Path/Circuit is applied in real-world scenarios. We'll walk through code that uses Eulerian Path/Circuit effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Eulerian Path/Circuit?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Eulerian Path/Circuit is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Eulerian Path/Circuit?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Eulerian Path/Circuit implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Eulerian Path/Circuit commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Eulerian Path/Circuit early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Eulerian Path/Circuit early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Eulerian Path/Circuit is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Eulerian Path/Circuit?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Eulerian Path/Circuit is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "graph algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdfa"
  },
  "conceptId": "hamiltonian_path",
  "title": "Hamiltonian Path",
  "description": "Description for Hamiltonian Path.",
  "videoUrl": "https://dummyurl.com/video/hamiltonian_path",
  "prerequisites": [],
  "content": {
    "intro": "Hamiltonian Path is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Hamiltonian Path",
        "content": "This section provides a basic explanation of Hamiltonian Path, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Hamiltonian Path",
        "content": "Let's look at how Hamiltonian Path is applied in real-world scenarios. We'll walk through code that uses Hamiltonian Path effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Hamiltonian Path?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Hamiltonian Path is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Hamiltonian Path?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Hamiltonian Path implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Hamiltonian Path commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Hamiltonian Path early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Hamiltonian Path early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Hamiltonian Path is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Hamiltonian Path?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Hamiltonian Path is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "graph algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdfb"
  },
  "conceptId": "cycle_detection_graphs",
  "title": "Cycle Detection (Graphs)",
  "description": "Description for Cycle Detection (Graphs).",
  "videoUrl": "https://dummyurl.com/video/cycle_detection_graphs",
  "prerequisites": [],
  "content": {
    "intro": "Cycle Detection (Graphs) is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Cycle Detection (Graphs)",
        "content": "This section provides a basic explanation of Cycle Detection (Graphs), including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Cycle Detection (Graphs)",
        "content": "Let's look at how Cycle Detection (Graphs) is applied in real-world scenarios. We'll walk through code that uses Cycle Detection (Graphs) effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Cycle Detection (Graphs)?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Cycle Detection (Graphs) is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Cycle Detection (Graphs)?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Cycle Detection (Graphs) implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Cycle Detection (Graphs) commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Cycle Detection (Graphs) early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Cycle Detection (Graphs) early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Cycle Detection (Graphs) is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Cycle Detection (Graphs)?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Cycle Detection (Graphs) is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "graph algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdfc"
  },
  "conceptId": "2_sat",
  "title": "2-SAT",
  "description": "Description for 2-SAT.",
  "videoUrl": "https://dummyurl.com/video/2_sat",
  "prerequisites": [],
  "content": {
    "intro": "2-SAT is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of 2-SAT",
        "content": "This section provides a basic explanation of 2-SAT, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of 2-SAT",
        "content": "Let's look at how 2-SAT is applied in real-world scenarios. We'll walk through code that uses 2-SAT effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of 2-SAT?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "2-SAT is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about 2-SAT?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "2-SAT implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is 2-SAT commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning 2-SAT early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn 2-SAT early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "2-SAT is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to 2-SAT?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "2-SAT is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "graph algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdfd"
  },
  "conceptId": "bitmask_dp",
  "title": "Bitmask DP",
  "description": "Description for Bitmask DP.",
  "videoUrl": "https://dummyurl.com/video/bitmask_dp",
  "prerequisites": [],
  "content": {
    "intro": "Bitmask DP is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Bitmask DP",
        "content": "This section provides a basic explanation of Bitmask DP, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Bitmask DP",
        "content": "Let's look at how Bitmask DP is applied in real-world scenarios. We'll walk through code that uses Bitmask DP effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Bitmask DP?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Bitmask DP is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Bitmask DP?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Bitmask DP implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Bitmask DP commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Bitmask DP early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Bitmask DP early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Bitmask DP is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Bitmask DP?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Bitmask DP is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdfe"
  },
  "conceptId": "digit_dp",
  "title": "Digit DP",
  "description": "Description for Digit DP.",
  "videoUrl": "https://dummyurl.com/video/digit_dp",
  "prerequisites": [],
  "content": {
    "intro": "Digit DP is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Digit DP",
        "content": "This section provides a basic explanation of Digit DP, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Digit DP",
        "content": "Let's look at how Digit DP is applied in real-world scenarios. We'll walk through code that uses Digit DP effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Digit DP?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Digit DP is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Digit DP?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Digit DP implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Digit DP commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Digit DP early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Digit DP early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Digit DP is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Digit DP?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Digit DP is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfdff"
  },
  "conceptId": "dp_on_trees",
  "title": "DP on Trees",
  "description": "Description for DP on Trees.",
  "videoUrl": "https://dummyurl.com/video/dp_on_trees",
  "prerequisites": [],
  "content": {
    "intro": "DP on Trees is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of DP on Trees",
        "content": "This section provides a basic explanation of DP on Trees, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of DP on Trees",
        "content": "Let's look at how DP on Trees is applied in real-world scenarios. We'll walk through code that uses DP on Trees effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of DP on Trees?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "DP on Trees is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about DP on Trees?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "DP on Trees implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is DP on Trees commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning DP on Trees early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn DP on Trees early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "DP on Trees is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to DP on Trees?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "DP on Trees is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe00"
  },
  "conceptId": "dp_on_graphs",
  "title": "DP on Graphs",
  "description": "Description for DP on Graphs.",
  "videoUrl": "https://dummyurl.com/video/dp_on_graphs",
  "prerequisites": [],
  "content": {
    "intro": "DP on Graphs is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of DP on Graphs",
        "content": "This section provides a basic explanation of DP on Graphs, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of DP on Graphs",
        "content": "Let's look at how DP on Graphs is applied in real-world scenarios. We'll walk through code that uses DP on Graphs effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of DP on Graphs?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "DP on Graphs is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about DP on Graphs?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "DP on Graphs implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is DP on Graphs commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning DP on Graphs early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn DP on Graphs early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "DP on Graphs is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to DP on Graphs?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "DP on Graphs is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe01"
  },
  "conceptId": "sliding_window_dp",
  "title": "Sliding Window DP",
  "description": "Description for Sliding Window DP.",
  "videoUrl": "https://dummyurl.com/video/sliding_window_dp",
  "prerequisites": [],
  "content": {
    "intro": "Sliding Window DP is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Sliding Window DP",
        "content": "This section provides a basic explanation of Sliding Window DP, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Sliding Window DP",
        "content": "Let's look at how Sliding Window DP is applied in real-world scenarios. We'll walk through code that uses Sliding Window DP effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Sliding Window DP?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Sliding Window DP is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Sliding Window DP?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Sliding Window DP implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Sliding Window DP commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Sliding Window DP early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Sliding Window DP early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Sliding Window DP is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Sliding Window DP?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Sliding Window DP is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe02"
  },
  "conceptId": "gcd_lcm",
  "title": "GCD & LCM",
  "description": "Description for GCD & LCM.",
  "videoUrl": "https://dummyurl.com/video/gcd_lcm",
  "prerequisites": [],
  "content": {
    "intro": "GCD & LCM is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of GCD & LCM",
        "content": "This section provides a basic explanation of GCD & LCM, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of GCD & LCM",
        "content": "Let's look at how GCD & LCM is applied in real-world scenarios. We'll walk through code that uses GCD & LCM effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of GCD & LCM?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "GCD & LCM is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about GCD & LCM?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "GCD & LCM implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is GCD & LCM commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning GCD & LCM early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn GCD & LCM early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "GCD & LCM is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to GCD & LCM?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "GCD & LCM is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "math algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe03"
  },
  "conceptId": "euclidean_algorithm",
  "title": "Euclidean Algorithm",
  "description": "Description for Euclidean Algorithm.",
  "videoUrl": "https://dummyurl.com/video/euclidean_algorithm",
  "prerequisites": [],
  "content": {
    "intro": "Euclidean Algorithm is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Euclidean Algorithm",
        "content": "This section provides a basic explanation of Euclidean Algorithm, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Euclidean Algorithm",
        "content": "Let's look at how Euclidean Algorithm is applied in real-world scenarios. We'll walk through code that uses Euclidean Algorithm effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Euclidean Algorithm?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Euclidean Algorithm is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Euclidean Algorithm?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Euclidean Algorithm implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Euclidean Algorithm commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Euclidean Algorithm early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Euclidean Algorithm early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Euclidean Algorithm is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Euclidean Algorithm?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Euclidean Algorithm is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "math algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe04"
  },
  "conceptId": "sieve_of_eratosthenes",
  "title": "Sieve of Eratosthenes",
  "description": "Description for Sieve of Eratosthenes.",
  "videoUrl": "https://dummyurl.com/video/sieve_of_eratosthenes",
  "prerequisites": [],
  "content": {
    "intro": "Sieve of Eratosthenes is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Sieve of Eratosthenes",
        "content": "This section provides a basic explanation of Sieve of Eratosthenes, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Sieve of Eratosthenes",
        "content": "Let's look at how Sieve of Eratosthenes is applied in real-world scenarios. We'll walk through code that uses Sieve of Eratosthenes effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Sieve of Eratosthenes?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Sieve of Eratosthenes is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Sieve of Eratosthenes?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Sieve of Eratosthenes implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Sieve of Eratosthenes commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Sieve of Eratosthenes early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Sieve of Eratosthenes early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Sieve of Eratosthenes is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Sieve of Eratosthenes?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Sieve of Eratosthenes is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "math algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe05"
  },
  "conceptId": "modular_arithmetic",
  "title": "Modular Arithmetic",
  "description": "Description for Modular Arithmetic.",
  "videoUrl": "https://dummyurl.com/video/modular_arithmetic",
  "prerequisites": [],
  "content": {
    "intro": "Modular Arithmetic is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Modular Arithmetic",
        "content": "This section provides a basic explanation of Modular Arithmetic, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Modular Arithmetic",
        "content": "Let's look at how Modular Arithmetic is applied in real-world scenarios. We'll walk through code that uses Modular Arithmetic effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Modular Arithmetic?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Modular Arithmetic is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Modular Arithmetic?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Modular Arithmetic implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Modular Arithmetic commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Modular Arithmetic early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Modular Arithmetic early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Modular Arithmetic is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Modular Arithmetic?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Modular Arithmetic is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "math algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe06"
  },
  "conceptId": "modular_exponentiation",
  "title": "Modular Exponentiation",
  "description": "Description for Modular Exponentiation.",
  "videoUrl": "https://dummyurl.com/video/modular_exponentiation",
  "prerequisites": [],
  "content": {
    "intro": "Modular Exponentiation is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Modular Exponentiation",
        "content": "This section provides a basic explanation of Modular Exponentiation, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Modular Exponentiation",
        "content": "Let's look at how Modular Exponentiation is applied in real-world scenarios. We'll walk through code that uses Modular Exponentiation effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Modular Exponentiation?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Modular Exponentiation is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Modular Exponentiation?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Modular Exponentiation implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Modular Exponentiation commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Modular Exponentiation early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Modular Exponentiation early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Modular Exponentiation is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Modular Exponentiation?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Modular Exponentiation is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "math algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe07"
  },
  "conceptId": "fermat_s_little_theorem",
  "title": "Fermat’s Little Theorem",
  "description": "Description for Fermat’s Little Theorem.",
  "videoUrl": "https://dummyurl.com/video/fermat_s_little_theorem",
  "prerequisites": [],
  "content": {
    "intro": "Fermat’s Little Theorem is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Fermat’s Little Theorem",
        "content": "This section provides a basic explanation of Fermat’s Little Theorem, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Fermat’s Little Theorem",
        "content": "Let's look at how Fermat’s Little Theorem is applied in real-world scenarios. We'll walk through code that uses Fermat’s Little Theorem effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Fermat’s Little Theorem?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Fermat’s Little Theorem is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Fermat’s Little Theorem?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Fermat’s Little Theorem implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Fermat’s Little Theorem commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Fermat’s Little Theorem early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Fermat’s Little Theorem early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Fermat’s Little Theorem is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Fermat’s Little Theorem?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Fermat’s Little Theorem is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "math algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe08"
  },
  "conceptId": "chinese_remainder_theorem",
  "title": "Chinese Remainder Theorem",
  "description": "Description for Chinese Remainder Theorem.",
  "videoUrl": "https://dummyurl.com/video/chinese_remainder_theorem",
  "prerequisites": [],
  "content": {
    "intro": "Chinese Remainder Theorem is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Chinese Remainder Theorem",
        "content": "This section provides a basic explanation of Chinese Remainder Theorem, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Chinese Remainder Theorem",
        "content": "Let's look at how Chinese Remainder Theorem is applied in real-world scenarios. We'll walk through code that uses Chinese Remainder Theorem effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Chinese Remainder Theorem?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Chinese Remainder Theorem is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Chinese Remainder Theorem?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Chinese Remainder Theorem implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Chinese Remainder Theorem commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Chinese Remainder Theorem early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Chinese Remainder Theorem early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Chinese Remainder Theorem is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Chinese Remainder Theorem?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Chinese Remainder Theorem is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "math algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe09"
  },
  "conceptId": "primality_test",
  "title": "Primality Test",
  "description": "Description for Primality Test.",
  "videoUrl": "https://dummyurl.com/video/primality_test",
  "prerequisites": [],
  "content": {
    "intro": "Primality Test is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Primality Test",
        "content": "This section provides a basic explanation of Primality Test, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Primality Test",
        "content": "Let's look at how Primality Test is applied in real-world scenarios. We'll walk through code that uses Primality Test effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Primality Test?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Primality Test is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Primality Test?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Primality Test implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Primality Test commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Primality Test early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Primality Test early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Primality Test is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Primality Test?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Primality Test is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "math algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe0a"
  },
  "conceptId": "extended_euclidean_algorithm",
  "title": "Extended Euclidean Algorithm",
  "description": "Description for Extended Euclidean Algorithm.",
  "videoUrl": "https://dummyurl.com/video/extended_euclidean_algorithm",
  "prerequisites": [],
  "content": {
    "intro": "Extended Euclidean Algorithm is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Extended Euclidean Algorithm",
        "content": "This section provides a basic explanation of Extended Euclidean Algorithm, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Extended Euclidean Algorithm",
        "content": "Let's look at how Extended Euclidean Algorithm is applied in real-world scenarios. We'll walk through code that uses Extended Euclidean Algorithm effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Extended Euclidean Algorithm?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Extended Euclidean Algorithm is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Extended Euclidean Algorithm?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Extended Euclidean Algorithm implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Extended Euclidean Algorithm commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Extended Euclidean Algorithm early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Extended Euclidean Algorithm early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Extended Euclidean Algorithm is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Extended Euclidean Algorithm?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Extended Euclidean Algorithm is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "math algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe0b"
  },
  "conceptId": "miller_rabin_primality_test",
  "title": "Miller-Rabin Primality Test",
  "description": "Description for Miller-Rabin Primality Test.",
  "videoUrl": "https://dummyurl.com/video/miller_rabin_primality_test",
  "prerequisites": [],
  "content": {
    "intro": "Miller-Rabin Primality Test is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Miller-Rabin Primality Test",
        "content": "This section provides a basic explanation of Miller-Rabin Primality Test, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Miller-Rabin Primality Test",
        "content": "Let's look at how Miller-Rabin Primality Test is applied in real-world scenarios. We'll walk through code that uses Miller-Rabin Primality Test effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Miller-Rabin Primality Test?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Miller-Rabin Primality Test is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Miller-Rabin Primality Test?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Miller-Rabin Primality Test implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Miller-Rabin Primality Test commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Miller-Rabin Primality Test early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Miller-Rabin Primality Test early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Miller-Rabin Primality Test is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Miller-Rabin Primality Test?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Miller-Rabin Primality Test is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "math algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe0c"
  },
  "conceptId": "pollard_s_rho_factorization",
  "title": "Pollard’s Rho Factorization",
  "description": "Description for Pollard’s Rho Factorization.",
  "videoUrl": "https://dummyurl.com/video/pollard_s_rho_factorization",
  "prerequisites": [],
  "content": {
    "intro": "Pollard’s Rho Factorization is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Pollard’s Rho Factorization",
        "content": "This section provides a basic explanation of Pollard’s Rho Factorization, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Pollard’s Rho Factorization",
        "content": "Let's look at how Pollard’s Rho Factorization is applied in real-world scenarios. We'll walk through code that uses Pollard’s Rho Factorization effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Pollard’s Rho Factorization?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Pollard’s Rho Factorization is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Pollard’s Rho Factorization?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Pollard’s Rho Factorization implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Pollard’s Rho Factorization commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Pollard’s Rho Factorization early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Pollard’s Rho Factorization early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Pollard’s Rho Factorization is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Pollard’s Rho Factorization?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Pollard’s Rho Factorization is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "math algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe0d"
  },
  "conceptId": "totient_function_euler_s_phi",
  "title": "Totient Function (Euler’s Phi)",
  "description": "Description for Totient Function (Euler’s Phi).",
  "videoUrl": "https://dummyurl.com/video/totient_function_euler_s_phi",
  "prerequisites": [],
  "content": {
    "intro": "Totient Function (Euler’s Phi) is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Totient Function (Euler’s Phi)",
        "content": "This section provides a basic explanation of Totient Function (Euler’s Phi), including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Totient Function (Euler’s Phi)",
        "content": "Let's look at how Totient Function (Euler’s Phi) is applied in real-world scenarios. We'll walk through code that uses Totient Function (Euler’s Phi) effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Totient Function (Euler’s Phi)?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Totient Function (Euler’s Phi) is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Totient Function (Euler’s Phi)?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Totient Function (Euler’s Phi) implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Totient Function (Euler’s Phi) commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Totient Function (Euler’s Phi) early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Totient Function (Euler’s Phi) early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Totient Function (Euler’s Phi) is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Totient Function (Euler’s Phi)?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Totient Function (Euler’s Phi) is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "math algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe0e"
  },
  "conceptId": "sliding_window_technique",
  "title": "Sliding Window Technique",
  "description": "Description for Sliding Window Technique.",
  "videoUrl": "https://dummyurl.com/video/sliding_window_technique",
  "prerequisites": [],
  "content": {
    "intro": "Sliding Window Technique is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Sliding Window Technique",
        "content": "This section provides a basic explanation of Sliding Window Technique, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Sliding Window Technique",
        "content": "Let's look at how Sliding Window Technique is applied in real-world scenarios. We'll walk through code that uses Sliding Window Technique effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Sliding Window Technique?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Sliding Window Technique is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Sliding Window Technique?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Sliding Window Technique implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Sliding Window Technique commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Sliding Window Technique early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Sliding Window Technique early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Sliding Window Technique is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Sliding Window Technique?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Sliding Window Technique is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "techniques"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe0f"
  },
  "conceptId": "two_pointer_technique",
  "title": "Two Pointer Technique",
  "description": "Description for Two Pointer Technique.",
  "videoUrl": "https://dummyurl.com/video/two_pointer_technique",
  "prerequisites": [],
  "content": {
    "intro": "Two Pointer Technique is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Two Pointer Technique",
        "content": "This section provides a basic explanation of Two Pointer Technique, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Two Pointer Technique",
        "content": "Let's look at how Two Pointer Technique is applied in real-world scenarios. We'll walk through code that uses Two Pointer Technique effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Two Pointer Technique?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Two Pointer Technique is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Two Pointer Technique?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Two Pointer Technique implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Two Pointer Technique commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Two Pointer Technique early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Two Pointer Technique early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Two Pointer Technique is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Two Pointer Technique?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Two Pointer Technique is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "techniques"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe10"
  },
  "conceptId": "binary_search_on_answer",
  "title": "Binary Search on Answer",
  "description": "Description for Binary Search on Answer.",
  "videoUrl": "https://dummyurl.com/video/binary_search_on_answer",
  "prerequisites": [],
  "content": {
    "intro": "Binary Search on Answer is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Binary Search on Answer",
        "content": "This section provides a basic explanation of Binary Search on Answer, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Binary Search on Answer",
        "content": "Let's look at how Binary Search on Answer is applied in real-world scenarios. We'll walk through code that uses Binary Search on Answer effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Binary Search on Answer?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Binary Search on Answer is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Binary Search on Answer?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Binary Search on Answer implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Binary Search on Answer commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Binary Search on Answer early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Binary Search on Answer early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Binary Search on Answer is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Binary Search on Answer?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Binary Search on Answer is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "techniques"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe11"
  },
  "conceptId": "prefix_sum",
  "title": "Prefix Sum",
  "description": "Description for Prefix Sum.",
  "videoUrl": "https://dummyurl.com/video/prefix_sum",
  "prerequisites": [],
  "content": {
    "intro": "Prefix Sum is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Prefix Sum",
        "content": "This section provides a basic explanation of Prefix Sum, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Prefix Sum",
        "content": "Let's look at how Prefix Sum is applied in real-world scenarios. We'll walk through code that uses Prefix Sum effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Prefix Sum?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Prefix Sum is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Prefix Sum?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Prefix Sum implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Prefix Sum commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Prefix Sum early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Prefix Sum early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Prefix Sum is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Prefix Sum?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Prefix Sum is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "techniques"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe12"
  },
  "conceptId": "difference_array_technique",
  "title": "Difference Array Technique",
  "description": "Description for Difference Array Technique.",
  "videoUrl": "https://dummyurl.com/video/difference_array_technique",
  "prerequisites": [],
  "content": {
    "intro": "Difference Array Technique is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Difference Array Technique",
        "content": "This section provides a basic explanation of Difference Array Technique, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Difference Array Technique",
        "content": "Let's look at how Difference Array Technique is applied in real-world scenarios. We'll walk through code that uses Difference Array Technique effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Difference Array Technique?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Difference Array Technique is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Difference Array Technique?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Difference Array Technique implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Difference Array Technique commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Difference Array Technique early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Difference Array Technique early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Difference Array Technique is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Difference Array Technique?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Difference Array Technique is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "techniques"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe13"
  },
  "conceptId": "monotonic_stack",
  "title": "Monotonic Stack",
  "description": "Description for Monotonic Stack.",
  "videoUrl": "https://dummyurl.com/video/monotonic_stack",
  "prerequisites": [],
  "content": {
    "intro": "Monotonic Stack is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Monotonic Stack",
        "content": "This section provides a basic explanation of Monotonic Stack, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Monotonic Stack",
        "content": "Let's look at how Monotonic Stack is applied in real-world scenarios. We'll walk through code that uses Monotonic Stack effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Monotonic Stack?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Monotonic Stack is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Monotonic Stack?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Monotonic Stack implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Monotonic Stack commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Monotonic Stack early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Monotonic Stack early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Monotonic Stack is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Monotonic Stack?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Monotonic Stack is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "patterns"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe14"
  },
  "conceptId": "monotonic_queue",
  "title": "Monotonic Queue",
  "description": "Description for Monotonic Queue.",
  "videoUrl": "https://dummyurl.com/video/monotonic_queue",
  "prerequisites": [],
  "content": {
    "intro": "Monotonic Queue is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Monotonic Queue",
        "content": "This section provides a basic explanation of Monotonic Queue, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Monotonic Queue",
        "content": "Let's look at how Monotonic Queue is applied in real-world scenarios. We'll walk through code that uses Monotonic Queue effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Monotonic Queue?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Monotonic Queue is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Monotonic Queue?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Monotonic Queue implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Monotonic Queue commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Monotonic Queue early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Monotonic Queue early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Monotonic Queue is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Monotonic Queue?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Monotonic Queue is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "patterns"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe15"
  },
  "conceptId": "xor_pattern",
  "title": "XOR Pattern",
  "description": "Description for XOR Pattern.",
  "videoUrl": "https://dummyurl.com/video/xor_pattern",
  "prerequisites": [],
  "content": {
    "intro": "XOR Pattern is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of XOR Pattern",
        "content": "This section provides a basic explanation of XOR Pattern, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of XOR Pattern",
        "content": "Let's look at how XOR Pattern is applied in real-world scenarios. We'll walk through code that uses XOR Pattern effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of XOR Pattern?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "XOR Pattern is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about XOR Pattern?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "XOR Pattern implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is XOR Pattern commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning XOR Pattern early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn XOR Pattern early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "XOR Pattern is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to XOR Pattern?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "XOR Pattern is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "patterns"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe16"
  },
  "conceptId": "counting_inversions",
  "title": "Counting Inversions",
  "description": "Description for Counting Inversions.",
  "videoUrl": "https://dummyurl.com/video/counting_inversions",
  "prerequisites": [],
  "content": {
    "intro": "Counting Inversions is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Counting Inversions",
        "content": "This section provides a basic explanation of Counting Inversions, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Counting Inversions",
        "content": "Let's look at how Counting Inversions is applied in real-world scenarios. We'll walk through code that uses Counting Inversions effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Counting Inversions?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Counting Inversions is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Counting Inversions?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Counting Inversions implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Counting Inversions commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Counting Inversions early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Counting Inversions early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Counting Inversions is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Counting Inversions?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Counting Inversions is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "patterns"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe17"
  },
  "conceptId": "dutch_national_flag_algorithm",
  "title": "Dutch National Flag Algorithm",
  "description": "Description for Dutch National Flag Algorithm.",
  "videoUrl": "https://dummyurl.com/video/dutch_national_flag_algorithm",
  "prerequisites": [],
  "content": {
    "intro": "Dutch National Flag Algorithm is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Dutch National Flag Algorithm",
        "content": "This section provides a basic explanation of Dutch National Flag Algorithm, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Dutch National Flag Algorithm",
        "content": "Let's look at how Dutch National Flag Algorithm is applied in real-world scenarios. We'll walk through code that uses Dutch National Flag Algorithm effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Dutch National Flag Algorithm?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Dutch National Flag Algorithm is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Dutch National Flag Algorithm?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Dutch National Flag Algorithm implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Dutch National Flag Algorithm commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Dutch National Flag Algorithm early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Dutch National Flag Algorithm early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Dutch National Flag Algorithm is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Dutch National Flag Algorithm?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Dutch National Flag Algorithm is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "patterns"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe18"
  },
  "conceptId": "greedy_approach",
  "title": "Greedy Approach",
  "description": "Description for Greedy Approach.",
  "videoUrl": "https://dummyurl.com/video/greedy_approach",
  "prerequisites": [],
  "content": {
    "intro": "Greedy Approach is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Greedy Approach",
        "content": "This section provides a basic explanation of Greedy Approach, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Greedy Approach",
        "content": "Let's look at how Greedy Approach is applied in real-world scenarios. We'll walk through code that uses Greedy Approach effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Greedy Approach?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Greedy Approach is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Greedy Approach?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Greedy Approach implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Greedy Approach commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Greedy Approach early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Greedy Approach early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Greedy Approach is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Greedy Approach?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Greedy Approach is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "techniques"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe19"
  },
  "conceptId": "backtracking_with_pruning",
  "title": "Backtracking with Pruning",
  "description": "Description for Backtracking with Pruning.",
  "videoUrl": "https://dummyurl.com/video/backtracking_with_pruning",
  "prerequisites": [],
  "content": {
    "intro": "Backtracking with Pruning is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Backtracking with Pruning",
        "content": "This section provides a basic explanation of Backtracking with Pruning, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Backtracking with Pruning",
        "content": "Let's look at how Backtracking with Pruning is applied in real-world scenarios. We'll walk through code that uses Backtracking with Pruning effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Backtracking with Pruning?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Backtracking with Pruning is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Backtracking with Pruning?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Backtracking with Pruning implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Backtracking with Pruning commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Backtracking with Pruning early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Backtracking with Pruning early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Backtracking with Pruning is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Backtracking with Pruning?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Backtracking with Pruning is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "techniques"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe1a"
  },
  "conceptId": "in_place_algorithms",
  "title": "In-place Algorithms",
  "description": "Description for In-place Algorithms.",
  "videoUrl": "https://dummyurl.com/video/in_place_algorithms",
  "prerequisites": [],
  "content": {
    "intro": "In-place Algorithms is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of In-place Algorithms",
        "content": "This section provides a basic explanation of In-place Algorithms, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of In-place Algorithms",
        "content": "Let's look at how In-place Algorithms is applied in real-world scenarios. We'll walk through code that uses In-place Algorithms effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of In-place Algorithms?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "In-place Algorithms is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about In-place Algorithms?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "In-place Algorithms implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is In-place Algorithms commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning In-place Algorithms early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn In-place Algorithms early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "In-place Algorithms is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to In-place Algorithms?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "In-place Algorithms is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "techniques"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe1b"
  },
  "conceptId": "ternary_search",
  "title": "Ternary Search",
  "description": "Description for Ternary Search.",
  "videoUrl": "https://dummyurl.com/video/ternary_search",
  "prerequisites": [],
  "content": {
    "intro": "Ternary Search is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Ternary Search",
        "content": "This section provides a basic explanation of Ternary Search, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Ternary Search",
        "content": "Let's look at how Ternary Search is applied in real-world scenarios. We'll walk through code that uses Ternary Search effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Ternary Search?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Ternary Search is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Ternary Search?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Ternary Search implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Ternary Search commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Ternary Search early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Ternary Search early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Ternary Search is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Ternary Search?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Ternary Search is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe1c"
  },
  "conceptId": "longest_common_subsequence_lcs",
  "title": "Longest Common Subsequence (LCS)",
  "description": "Description for Longest Common Subsequence (LCS).",
  "videoUrl": "https://dummyurl.com/video/longest_common_subsequence_lcs",
  "prerequisites": [],
  "content": {
    "intro": "Longest Common Subsequence (LCS) is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Longest Common Subsequence (LCS)",
        "content": "This section provides a basic explanation of Longest Common Subsequence (LCS), including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Longest Common Subsequence (LCS)",
        "content": "Let's look at how Longest Common Subsequence (LCS) is applied in real-world scenarios. We'll walk through code that uses Longest Common Subsequence (LCS) effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Longest Common Subsequence (LCS)?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Longest Common Subsequence (LCS) is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Longest Common Subsequence (LCS)?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Longest Common Subsequence (LCS) implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Longest Common Subsequence (LCS) commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Longest Common Subsequence (LCS) early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Longest Common Subsequence (LCS) early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Longest Common Subsequence (LCS) is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Longest Common Subsequence (LCS)?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Longest Common Subsequence (LCS) is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe1d"
  },
  "conceptId": "longest_increasing_subsequence_lis",
  "title": "Longest Increasing Subsequence (LIS)",
  "description": "Description for Longest Increasing Subsequence (LIS).",
  "videoUrl": "https://dummyurl.com/video/longest_increasing_subsequence_lis",
  "prerequisites": [],
  "content": {
    "intro": "Longest Increasing Subsequence (LIS) is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Longest Increasing Subsequence (LIS)",
        "content": "This section provides a basic explanation of Longest Increasing Subsequence (LIS), including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Longest Increasing Subsequence (LIS)",
        "content": "Let's look at how Longest Increasing Subsequence (LIS) is applied in real-world scenarios. We'll walk through code that uses Longest Increasing Subsequence (LIS) effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Longest Increasing Subsequence (LIS)?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Longest Increasing Subsequence (LIS) is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Longest Increasing Subsequence (LIS)?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Longest Increasing Subsequence (LIS) implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Longest Increasing Subsequence (LIS) commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Longest Increasing Subsequence (LIS) early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Longest Increasing Subsequence (LIS) early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Longest Increasing Subsequence (LIS) is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Longest Increasing Subsequence (LIS)?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Longest Increasing Subsequence (LIS) is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe1e"
  },
  "conceptId": "merge_intervals",
  "title": "Merge Intervals",
  "description": "Description for Merge Intervals.",
  "videoUrl": "https://dummyurl.com/video/merge_intervals",
  "prerequisites": [],
  "content": {
    "intro": "Merge Intervals is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Merge Intervals",
        "content": "This section provides a basic explanation of Merge Intervals, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Merge Intervals",
        "content": "Let's look at how Merge Intervals is applied in real-world scenarios. We'll walk through code that uses Merge Intervals effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Merge Intervals?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Merge Intervals is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Merge Intervals?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Merge Intervals implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Merge Intervals commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Merge Intervals early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Merge Intervals early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Merge Intervals is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Merge Intervals?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Merge Intervals is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "patterns"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe1f"
  },
  "conceptId": "matrix_traversal",
  "title": "Matrix Traversal",
  "description": "Description for Matrix Traversal.",
  "videoUrl": "https://dummyurl.com/video/matrix_traversal",
  "prerequisites": [],
  "content": {
    "intro": "Matrix Traversal is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Matrix Traversal",
        "content": "This section provides a basic explanation of Matrix Traversal, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Matrix Traversal",
        "content": "Let's look at how Matrix Traversal is applied in real-world scenarios. We'll walk through code that uses Matrix Traversal effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Matrix Traversal?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Matrix Traversal is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Matrix Traversal?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Matrix Traversal implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Matrix Traversal commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Matrix Traversal early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Matrix Traversal early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Matrix Traversal is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Matrix Traversal?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Matrix Traversal is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "patterns"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe20"
  },
  "conceptId": "suffix_array",
  "title": "Suffix Array",
  "description": "Description for Suffix Array.",
  "videoUrl": "https://dummyurl.com/video/suffix_array",
  "prerequisites": [],
  "content": {
    "intro": "Suffix Array is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Suffix Array",
        "content": "This section provides a basic explanation of Suffix Array, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Suffix Array",
        "content": "Let's look at how Suffix Array is applied in real-world scenarios. We'll walk through code that uses Suffix Array effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Suffix Array?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Suffix Array is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Suffix Array?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Suffix Array implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Suffix Array commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Suffix Array early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Suffix Array early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Suffix Array is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Suffix Array?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Suffix Array is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe21"
  },
  "conceptId": "suffix_tree",
  "title": "Suffix Tree",
  "description": "Description for Suffix Tree.",
  "videoUrl": "https://dummyurl.com/video/suffix_tree",
  "prerequisites": [],
  "content": {
    "intro": "Suffix Tree is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Suffix Tree",
        "content": "This section provides a basic explanation of Suffix Tree, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Suffix Tree",
        "content": "Let's look at how Suffix Tree is applied in real-world scenarios. We'll walk through code that uses Suffix Tree effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Suffix Tree?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Suffix Tree is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Suffix Tree?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Suffix Tree implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Suffix Tree commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Suffix Tree early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Suffix Tree early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Suffix Tree is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Suffix Tree?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Suffix Tree is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe22"
  },
  "conceptId": "range_minimum_query_rmq",
  "title": "Range Minimum Query (RMQ)",
  "description": "Description for Range Minimum Query (RMQ).",
  "videoUrl": "https://dummyurl.com/video/range_minimum_query_rmq",
  "prerequisites": [],
  "content": {
    "intro": "Range Minimum Query (RMQ) is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Range Minimum Query (RMQ)",
        "content": "This section provides a basic explanation of Range Minimum Query (RMQ), including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Range Minimum Query (RMQ)",
        "content": "Let's look at how Range Minimum Query (RMQ) is applied in real-world scenarios. We'll walk through code that uses Range Minimum Query (RMQ) effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Range Minimum Query (RMQ)?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Range Minimum Query (RMQ) is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Range Minimum Query (RMQ)?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Range Minimum Query (RMQ) implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Range Minimum Query (RMQ) commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Range Minimum Query (RMQ) early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Range Minimum Query (RMQ) early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Range Minimum Query (RMQ) is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Range Minimum Query (RMQ)?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Range Minimum Query (RMQ) is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe23"
  },
  "conceptId": "persistent_data_structures",
  "title": "Persistent Data Structures",
  "description": "Description for Persistent Data Structures.",
  "videoUrl": "https://dummyurl.com/video/persistent_data_structures",
  "prerequisites": [],
  "content": {
    "intro": "Persistent Data Structures is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Persistent Data Structures",
        "content": "This section provides a basic explanation of Persistent Data Structures, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Persistent Data Structures",
        "content": "Let's look at how Persistent Data Structures is applied in real-world scenarios. We'll walk through code that uses Persistent Data Structures effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Persistent Data Structures?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Persistent Data Structures is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Persistent Data Structures?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Persistent Data Structures implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Persistent Data Structures commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Persistent Data Structures early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Persistent Data Structures early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Persistent Data Structures is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Persistent Data Structures?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Persistent Data Structures is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe24"
  },
  "conceptId": "union_find_optimized",
  "title": "Union-Find (Optimized)",
  "description": "Description for Union-Find (Optimized).",
  "videoUrl": "https://dummyurl.com/video/union_find_optimized",
  "prerequisites": [],
  "content": {
    "intro": "Union-Find (Optimized) is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Union-Find (Optimized)",
        "content": "This section provides a basic explanation of Union-Find (Optimized), including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Union-Find (Optimized)",
        "content": "Let's look at how Union-Find (Optimized) is applied in real-world scenarios. We'll walk through code that uses Union-Find (Optimized) effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Union-Find (Optimized)?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Union-Find (Optimized) is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Union-Find (Optimized)?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Union-Find (Optimized) implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Union-Find (Optimized) commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Union-Find (Optimized) early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Union-Find (Optimized) early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Union-Find (Optimized) is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Union-Find (Optimized)?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Union-Find (Optimized) is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe25"
  },
  "conceptId": "skip_list",
  "title": "Skip List",
  "description": "Description for Skip List.",
  "videoUrl": "https://dummyurl.com/video/skip_list",
  "prerequisites": [],
  "content": {
    "intro": "Skip List is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Skip List",
        "content": "This section provides a basic explanation of Skip List, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Skip List",
        "content": "Let's look at how Skip List is applied in real-world scenarios. We'll walk through code that uses Skip List effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Skip List?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Skip List is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Skip List?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Skip List implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Skip List commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Skip List early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Skip List early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Skip List is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Skip List?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Skip List is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe26"
  },
  "conceptId": "sparse_table",
  "title": "Sparse Table",
  "description": "Description for Sparse Table.",
  "videoUrl": "https://dummyurl.com/video/sparse_table",
  "prerequisites": [],
  "content": {
    "intro": "Sparse Table is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Sparse Table",
        "content": "This section provides a basic explanation of Sparse Table, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Sparse Table",
        "content": "Let's look at how Sparse Table is applied in real-world scenarios. We'll walk through code that uses Sparse Table effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Sparse Table?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Sparse Table is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Sparse Table?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Sparse Table implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Sparse Table commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Sparse Table early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Sparse Table early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Sparse Table is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Sparse Table?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Sparse Table is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "non-linear data structures"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe27"
  },
  "conceptId": "sqrt_decomposition",
  "title": "SQRT Decomposition",
  "description": "Description for SQRT Decomposition.",
  "videoUrl": "https://dummyurl.com/video/sqrt_decomposition",
  "prerequisites": [],
  "content": {
    "intro": "SQRT Decomposition is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of SQRT Decomposition",
        "content": "This section provides a basic explanation of SQRT Decomposition, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of SQRT Decomposition",
        "content": "Let's look at how SQRT Decomposition is applied in real-world scenarios. We'll walk through code that uses SQRT Decomposition effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of SQRT Decomposition?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "SQRT Decomposition is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about SQRT Decomposition?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "SQRT Decomposition implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is SQRT Decomposition commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning SQRT Decomposition early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn SQRT Decomposition early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "SQRT Decomposition is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to SQRT Decomposition?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "SQRT Decomposition is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "techniques"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe28"
  },
  "conceptId": "meet_in_the_middle",
  "title": "Meet in the Middle",
  "description": "Description for Meet in the Middle.",
  "videoUrl": "https://dummyurl.com/video/meet_in_the_middle",
  "prerequisites": [],
  "content": {
    "intro": "Meet in the Middle is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Meet in the Middle",
        "content": "This section provides a basic explanation of Meet in the Middle, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Meet in the Middle",
        "content": "Let's look at how Meet in the Middle is applied in real-world scenarios. We'll walk through code that uses Meet in the Middle effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Meet in the Middle?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Meet in the Middle is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Meet in the Middle?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Meet in the Middle implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Meet in the Middle commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Meet in the Middle early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Meet in the Middle early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Meet in the Middle is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Meet in the Middle?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Meet in the Middle is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe29"
  },
  "conceptId": "binary_lifting",
  "title": "Binary Lifting",
  "description": "Description for Binary Lifting.",
  "videoUrl": "https://dummyurl.com/video/binary_lifting",
  "prerequisites": [],
  "content": {
    "intro": "Binary Lifting is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Binary Lifting",
        "content": "This section provides a basic explanation of Binary Lifting, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Binary Lifting",
        "content": "Let's look at how Binary Lifting is applied in real-world scenarios. We'll walk through code that uses Binary Lifting effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Binary Lifting?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Binary Lifting is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Binary Lifting?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Binary Lifting implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Binary Lifting commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Binary Lifting early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Binary Lifting early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Binary Lifting is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Binary Lifting?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Binary Lifting is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe2a"
  },
  "conceptId": "mo_s_algorithm",
  "title": "MO's Algorithm",
  "description": "Description for MO's Algorithm.",
  "videoUrl": "https://dummyurl.com/video/mo_s_algorithm",
  "prerequisites": [],
  "content": {
    "intro": "MO's Algorithm is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of MO's Algorithm",
        "content": "This section provides a basic explanation of MO's Algorithm, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of MO's Algorithm",
        "content": "Let's look at how MO's Algorithm is applied in real-world scenarios. We'll walk through code that uses MO's Algorithm effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of MO's Algorithm?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "MO's Algorithm is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about MO's Algorithm?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "MO's Algorithm implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is MO's Algorithm commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning MO's Algorithm early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn MO's Algorithm early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "MO's Algorithm is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to MO's Algorithm?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "MO's Algorithm is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe2b"
  },
  "conceptId": "heavy_light_decomposition",
  "title": "Heavy-Light Decomposition",
  "description": "Description for Heavy-Light Decomposition.",
  "videoUrl": "https://dummyurl.com/video/heavy_light_decomposition",
  "prerequisites": [],
  "content": {
    "intro": "Heavy-Light Decomposition is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Heavy-Light Decomposition",
        "content": "This section provides a basic explanation of Heavy-Light Decomposition, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Heavy-Light Decomposition",
        "content": "Let's look at how Heavy-Light Decomposition is applied in real-world scenarios. We'll walk through code that uses Heavy-Light Decomposition effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Heavy-Light Decomposition?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Heavy-Light Decomposition is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Heavy-Light Decomposition?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Heavy-Light Decomposition implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Heavy-Light Decomposition commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Heavy-Light Decomposition early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Heavy-Light Decomposition early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Heavy-Light Decomposition is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Heavy-Light Decomposition?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Heavy-Light Decomposition is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe2c"
  },
  "conceptId": "euler_tour_technique",
  "title": "Euler Tour Technique",
  "description": "Description for Euler Tour Technique.",
  "videoUrl": "https://dummyurl.com/video/euler_tour_technique",
  "prerequisites": [],
  "content": {
    "intro": "Euler Tour Technique is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Euler Tour Technique",
        "content": "This section provides a basic explanation of Euler Tour Technique, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Euler Tour Technique",
        "content": "Let's look at how Euler Tour Technique is applied in real-world scenarios. We'll walk through code that uses Euler Tour Technique effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Euler Tour Technique?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Euler Tour Technique is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Euler Tour Technique?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Euler Tour Technique implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Euler Tour Technique commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Euler Tour Technique early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Euler Tour Technique early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Euler Tour Technique is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Euler Tour Technique?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Euler Tour Technique is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe2d"
  },
  "conceptId": "fast_exponentiation",
  "title": "Fast Exponentiation",
  "description": "Description for Fast Exponentiation.",
  "videoUrl": "https://dummyurl.com/video/fast_exponentiation",
  "prerequisites": [],
  "content": {
    "intro": "Fast Exponentiation is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Fast Exponentiation",
        "content": "This section provides a basic explanation of Fast Exponentiation, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Fast Exponentiation",
        "content": "Let's look at how Fast Exponentiation is applied in real-world scenarios. We'll walk through code that uses Fast Exponentiation effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Fast Exponentiation?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Fast Exponentiation is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Fast Exponentiation?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Fast Exponentiation implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Fast Exponentiation commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Fast Exponentiation early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Fast Exponentiation early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Fast Exponentiation is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Fast Exponentiation?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Fast Exponentiation is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "math algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe2e"
  },
  "conceptId": "matrix_exponentiation",
  "title": "Matrix Exponentiation",
  "description": "Description for Matrix Exponentiation.",
  "videoUrl": "https://dummyurl.com/video/matrix_exponentiation",
  "prerequisites": [],
  "content": {
    "intro": "Matrix Exponentiation is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Matrix Exponentiation",
        "content": "This section provides a basic explanation of Matrix Exponentiation, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Matrix Exponentiation",
        "content": "Let's look at how Matrix Exponentiation is applied in real-world scenarios. We'll walk through code that uses Matrix Exponentiation effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Matrix Exponentiation?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Matrix Exponentiation is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Matrix Exponentiation?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Matrix Exponentiation implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Matrix Exponentiation commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Matrix Exponentiation early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Matrix Exponentiation early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Matrix Exponentiation is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Matrix Exponentiation?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Matrix Exponentiation is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "math algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe2f"
  },
  "conceptId": "combinatorics_permutations",
  "title": "Combinatorics (Permutations)",
  "description": "Description for Combinatorics (Permutations).",
  "videoUrl": "https://dummyurl.com/video/combinatorics_permutations",
  "prerequisites": [],
  "content": {
    "intro": "Combinatorics (Permutations) is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Combinatorics (Permutations)",
        "content": "This section provides a basic explanation of Combinatorics (Permutations), including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Combinatorics (Permutations)",
        "content": "Let's look at how Combinatorics (Permutations) is applied in real-world scenarios. We'll walk through code that uses Combinatorics (Permutations) effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Combinatorics (Permutations)?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Combinatorics (Permutations) is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Combinatorics (Permutations)?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Combinatorics (Permutations) implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Combinatorics (Permutations) commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Combinatorics (Permutations) early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Combinatorics (Permutations) early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Combinatorics (Permutations) is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Combinatorics (Permutations)?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Combinatorics (Permutations) is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "math algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe30"
  },
  "conceptId": "combinatorics_combinations",
  "title": "Combinatorics (Combinations)",
  "description": "Description for Combinatorics (Combinations).",
  "videoUrl": "https://dummyurl.com/video/combinatorics_combinations",
  "prerequisites": [],
  "content": {
    "intro": "Combinatorics (Combinations) is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Combinatorics (Combinations)",
        "content": "This section provides a basic explanation of Combinatorics (Combinations), including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Combinatorics (Combinations)",
        "content": "Let's look at how Combinatorics (Combinations) is applied in real-world scenarios. We'll walk through code that uses Combinatorics (Combinations) effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Combinatorics (Combinations)?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Combinatorics (Combinations) is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Combinatorics (Combinations)?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Combinatorics (Combinations) implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Combinatorics (Combinations) commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Combinatorics (Combinations) early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Combinatorics (Combinations) early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Combinatorics (Combinations) is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Combinatorics (Combinations)?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Combinatorics (Combinations) is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "math algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe31"
  },
  "conceptId": "lcp_array",
  "title": "LCP Array",
  "description": "Description for LCP Array.",
  "videoUrl": "https://dummyurl.com/video/lcp_array",
  "prerequisites": [],
  "content": {
    "intro": "LCP Array is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of LCP Array",
        "content": "This section provides a basic explanation of LCP Array, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of LCP Array",
        "content": "Let's look at how LCP Array is applied in real-world scenarios. We'll walk through code that uses LCP Array effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of LCP Array?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "LCP Array is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about LCP Array?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "LCP Array implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is LCP Array commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning LCP Array early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn LCP Array early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "LCP Array is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to LCP Array?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "LCP Array is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "string algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe32"
  },
  "conceptId": "convex_hull_graham_scan_jarvis_march",
  "title": "Convex Hull (Graham Scan, Jarvis March)",
  "description": "Description for Convex Hull (Graham Scan, Jarvis March).",
  "videoUrl": "https://dummyurl.com/video/convex_hull_graham_scan_jarvis_march",
  "prerequisites": [],
  "content": {
    "intro": "Convex Hull (Graham Scan, Jarvis March) is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Convex Hull (Graham Scan, Jarvis March)",
        "content": "This section provides a basic explanation of Convex Hull (Graham Scan, Jarvis March), including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Convex Hull (Graham Scan, Jarvis March)",
        "content": "Let's look at how Convex Hull (Graham Scan, Jarvis March) is applied in real-world scenarios. We'll walk through code that uses Convex Hull (Graham Scan, Jarvis March) effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Convex Hull (Graham Scan, Jarvis March)?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Convex Hull (Graham Scan, Jarvis March) is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Convex Hull (Graham Scan, Jarvis March)?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Convex Hull (Graham Scan, Jarvis March) implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Convex Hull (Graham Scan, Jarvis March) commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Convex Hull (Graham Scan, Jarvis March) early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Convex Hull (Graham Scan, Jarvis March) early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Convex Hull (Graham Scan, Jarvis March) is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Convex Hull (Graham Scan, Jarvis March)?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Convex Hull (Graham Scan, Jarvis March) is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "computational geometry"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe33"
  },
  "conceptId": "line_sweep_algorithm",
  "title": "Line Sweep Algorithm",
  "description": "Description for Line Sweep Algorithm.",
  "videoUrl": "https://dummyurl.com/video/line_sweep_algorithm",
  "prerequisites": [],
  "content": {
    "intro": "Line Sweep Algorithm is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Line Sweep Algorithm",
        "content": "This section provides a basic explanation of Line Sweep Algorithm, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Line Sweep Algorithm",
        "content": "Let's look at how Line Sweep Algorithm is applied in real-world scenarios. We'll walk through code that uses Line Sweep Algorithm effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Line Sweep Algorithm?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Line Sweep Algorithm is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Line Sweep Algorithm?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Line Sweep Algorithm implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Line Sweep Algorithm commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Line Sweep Algorithm early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Line Sweep Algorithm early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Line Sweep Algorithm is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Line Sweep Algorithm?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Line Sweep Algorithm is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "computational geometry"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe34"
  },
  "conceptId": "centroid_decomposition",
  "title": "Centroid Decomposition",
  "description": "Description for Centroid Decomposition.",
  "videoUrl": "https://dummyurl.com/video/centroid_decomposition",
  "prerequisites": [],
  "content": {
    "intro": "Centroid Decomposition is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Centroid Decomposition",
        "content": "This section provides a basic explanation of Centroid Decomposition, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Centroid Decomposition",
        "content": "Let's look at how Centroid Decomposition is applied in real-world scenarios. We'll walk through code that uses Centroid Decomposition effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Centroid Decomposition?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Centroid Decomposition is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Centroid Decomposition?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Centroid Decomposition implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Centroid Decomposition commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Centroid Decomposition early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Centroid Decomposition early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Centroid Decomposition is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Centroid Decomposition?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Centroid Decomposition is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "trees"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe35"
  },
  "conceptId": "multithreading",
  "title": "Multithreading",
  "description": "Description for Multithreading.",
  "videoUrl": "https://dummyurl.com/video/multithreading",
  "prerequisites": [],
  "content": {
    "intro": "Multithreading is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Multithreading",
        "content": "This section provides a basic explanation of Multithreading, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Multithreading",
        "content": "Let's look at how Multithreading is applied in real-world scenarios. We'll walk through code that uses Multithreading effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Multithreading?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Multithreading is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Multithreading?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Multithreading implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Multithreading commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Multithreading early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Multithreading early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Multithreading is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Multithreading?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Multithreading is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "concurrency"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe36"
  },
  "conceptId": "mutex_locks",
  "title": "Mutex & Locks",
  "description": "Description for Mutex & Locks.",
  "videoUrl": "https://dummyurl.com/video/mutex_locks",
  "prerequisites": [],
  "content": {
    "intro": "Mutex & Locks is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Mutex & Locks",
        "content": "This section provides a basic explanation of Mutex & Locks, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Mutex & Locks",
        "content": "Let's look at how Mutex & Locks is applied in real-world scenarios. We'll walk through code that uses Mutex & Locks effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Mutex & Locks?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Mutex & Locks is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Mutex & Locks?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Mutex & Locks implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Mutex & Locks commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Mutex & Locks early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Mutex & Locks early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Mutex & Locks is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Mutex & Locks?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Mutex & Locks is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "concurrency"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe37"
  },
  "conceptId": "race_condition_handling",
  "title": "Race Condition Handling",
  "description": "Description for Race Condition Handling.",
  "videoUrl": "https://dummyurl.com/video/race_condition_handling",
  "prerequisites": [],
  "content": {
    "intro": "Race Condition Handling is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Race Condition Handling",
        "content": "This section provides a basic explanation of Race Condition Handling, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Race Condition Handling",
        "content": "Let's look at how Race Condition Handling is applied in real-world scenarios. We'll walk through code that uses Race Condition Handling effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Race Condition Handling?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Race Condition Handling is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Race Condition Handling?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Race Condition Handling implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Race Condition Handling commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Race Condition Handling early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Race Condition Handling early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Race Condition Handling is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Race Condition Handling?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Race Condition Handling is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "concurrency"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe38"
  },
  "conceptId": "producer_consumer_problem",
  "title": "Producer-Consumer Problem",
  "description": "Description for Producer-Consumer Problem.",
  "videoUrl": "https://dummyurl.com/video/producer_consumer_problem",
  "prerequisites": [],
  "content": {
    "intro": "Producer-Consumer Problem is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Producer-Consumer Problem",
        "content": "This section provides a basic explanation of Producer-Consumer Problem, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Producer-Consumer Problem",
        "content": "Let's look at how Producer-Consumer Problem is applied in real-world scenarios. We'll walk through code that uses Producer-Consumer Problem effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Producer-Consumer Problem?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Producer-Consumer Problem is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Producer-Consumer Problem?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Producer-Consumer Problem implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Producer-Consumer Problem commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Producer-Consumer Problem early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Producer-Consumer Problem early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Producer-Consumer Problem is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Producer-Consumer Problem?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Producer-Consumer Problem is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "concurrency"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe39"
  },
  "conceptId": "deadlock_detection_avoidance",
  "title": "Deadlock Detection & Avoidance",
  "description": "Description for Deadlock Detection & Avoidance.",
  "videoUrl": "https://dummyurl.com/video/deadlock_detection_avoidance",
  "prerequisites": [],
  "content": {
    "intro": "Deadlock Detection & Avoidance is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Deadlock Detection & Avoidance",
        "content": "This section provides a basic explanation of Deadlock Detection & Avoidance, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Deadlock Detection & Avoidance",
        "content": "Let's look at how Deadlock Detection & Avoidance is applied in real-world scenarios. We'll walk through code that uses Deadlock Detection & Avoidance effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Deadlock Detection & Avoidance?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Deadlock Detection & Avoidance is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Deadlock Detection & Avoidance?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Deadlock Detection & Avoidance implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Deadlock Detection & Avoidance commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Deadlock Detection & Avoidance early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Deadlock Detection & Avoidance early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Deadlock Detection & Avoidance is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Deadlock Detection & Avoidance?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Deadlock Detection & Avoidance is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "concurrency"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe3a"
  },
  "conceptId": "external_merge_sort",
  "title": "External Merge Sort",
  "description": "Description for External Merge Sort.",
  "videoUrl": "https://dummyurl.com/video/external_merge_sort",
  "prerequisites": [],
  "content": {
    "intro": "External Merge Sort is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of External Merge Sort",
        "content": "This section provides a basic explanation of External Merge Sort, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of External Merge Sort",
        "content": "Let's look at how External Merge Sort is applied in real-world scenarios. We'll walk through code that uses External Merge Sort effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of External Merge Sort?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "External Merge Sort is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about External Merge Sort?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "External Merge Sort implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is External Merge Sort commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning External Merge Sort early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn External Merge Sort early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "External Merge Sort is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to External Merge Sort?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "External Merge Sort is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "external memory algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe3b"
  },
  "conceptId": "counting_sort_with_buckets",
  "title": "Counting Sort with Buckets",
  "description": "Description for Counting Sort with Buckets.",
  "videoUrl": "https://dummyurl.com/video/counting_sort_with_buckets",
  "prerequisites": [],
  "content": {
    "intro": "Counting Sort with Buckets is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Counting Sort with Buckets",
        "content": "This section provides a basic explanation of Counting Sort with Buckets, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Counting Sort with Buckets",
        "content": "Let's look at how Counting Sort with Buckets is applied in real-world scenarios. We'll walk through code that uses Counting Sort with Buckets effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Counting Sort with Buckets?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Counting Sort with Buckets is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Counting Sort with Buckets?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Counting Sort with Buckets implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Counting Sort with Buckets commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Counting Sort with Buckets early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Counting Sort with Buckets early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Counting Sort with Buckets is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Counting Sort with Buckets?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Counting Sort with Buckets is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "external memory algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe3c"
  },
  "conceptId": "bloom_filter",
  "title": "Bloom Filter",
  "description": "Description for Bloom Filter.",
  "videoUrl": "https://dummyurl.com/video/bloom_filter",
  "prerequisites": [],
  "content": {
    "intro": "Bloom Filter is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Bloom Filter",
        "content": "This section provides a basic explanation of Bloom Filter, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Bloom Filter",
        "content": "Let's look at how Bloom Filter is applied in real-world scenarios. We'll walk through code that uses Bloom Filter effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Bloom Filter?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Bloom Filter is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Bloom Filter?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Bloom Filter implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Bloom Filter commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Bloom Filter early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Bloom Filter early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Bloom Filter is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Bloom Filter?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Bloom Filter is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "streaming algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe3d"
  },
  "conceptId": "hyperloglog",
  "title": "HyperLogLog",
  "description": "Description for HyperLogLog.",
  "videoUrl": "https://dummyurl.com/video/hyperloglog",
  "prerequisites": [],
  "content": {
    "intro": "HyperLogLog is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of HyperLogLog",
        "content": "This section provides a basic explanation of HyperLogLog, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of HyperLogLog",
        "content": "Let's look at how HyperLogLog is applied in real-world scenarios. We'll walk through code that uses HyperLogLog effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of HyperLogLog?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "HyperLogLog is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about HyperLogLog?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "HyperLogLog implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is HyperLogLog commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning HyperLogLog early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn HyperLogLog early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "HyperLogLog is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to HyperLogLog?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "HyperLogLog is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "streaming algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe3e"
  },
  "conceptId": "cache_friendly_traversal",
  "title": "Cache-Friendly Traversal",
  "description": "Description for Cache-Friendly Traversal.",
  "videoUrl": "https://dummyurl.com/video/cache_friendly_traversal",
  "prerequisites": [],
  "content": {
    "intro": "Cache-Friendly Traversal is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Cache-Friendly Traversal",
        "content": "This section provides a basic explanation of Cache-Friendly Traversal, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Cache-Friendly Traversal",
        "content": "Let's look at how Cache-Friendly Traversal is applied in real-world scenarios. We'll walk through code that uses Cache-Friendly Traversal effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Cache-Friendly Traversal?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Cache-Friendly Traversal is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Cache-Friendly Traversal?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Cache-Friendly Traversal implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Cache-Friendly Traversal commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Cache-Friendly Traversal early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Cache-Friendly Traversal early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Cache-Friendly Traversal is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Cache-Friendly Traversal?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Cache-Friendly Traversal is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "memory efficiency"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe3f"
  },
  "conceptId": "row_major_vs_column_major",
  "title": "Row-Major vs Column-Major",
  "description": "Description for Row-Major vs Column-Major.",
  "videoUrl": "https://dummyurl.com/video/row_major_vs_column_major",
  "prerequisites": [],
  "content": {
    "intro": "Row-Major vs Column-Major is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Row-Major vs Column-Major",
        "content": "This section provides a basic explanation of Row-Major vs Column-Major, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Row-Major vs Column-Major",
        "content": "Let's look at how Row-Major vs Column-Major is applied in real-world scenarios. We'll walk through code that uses Row-Major vs Column-Major effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Row-Major vs Column-Major?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Row-Major vs Column-Major is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Row-Major vs Column-Major?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Row-Major vs Column-Major implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Row-Major vs Column-Major commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Row-Major vs Column-Major early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Row-Major vs Column-Major early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Row-Major vs Column-Major is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Row-Major vs Column-Major?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Row-Major vs Column-Major is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "memory efficiency"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe40"
  },
  "conceptId": "cache_oblivious_algorithms",
  "title": "Cache Oblivious Algorithms",
  "description": "Description for Cache Oblivious Algorithms.",
  "videoUrl": "https://dummyurl.com/video/cache_oblivious_algorithms",
  "prerequisites": [],
  "content": {
    "intro": "Cache Oblivious Algorithms is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Cache Oblivious Algorithms",
        "content": "This section provides a basic explanation of Cache Oblivious Algorithms, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Cache Oblivious Algorithms",
        "content": "Let's look at how Cache Oblivious Algorithms is applied in real-world scenarios. We'll walk through code that uses Cache Oblivious Algorithms effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Cache Oblivious Algorithms?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Cache Oblivious Algorithms is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Cache Oblivious Algorithms?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Cache Oblivious Algorithms implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Cache Oblivious Algorithms commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Cache Oblivious Algorithms early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Cache Oblivious Algorithms early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Cache Oblivious Algorithms is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Cache Oblivious Algorithms?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Cache Oblivious Algorithms is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "memory efficiency"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe41"
  },
  "conceptId": "aho_corasick_automaton",
  "title": "Aho-Corasick Automaton",
  "description": "Description for Aho-Corasick Automaton.",
  "videoUrl": "https://dummyurl.com/video/aho_corasick_automaton",
  "prerequisites": [],
  "content": {
    "intro": "Aho-Corasick Automaton is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Aho-Corasick Automaton",
        "content": "This section provides a basic explanation of Aho-Corasick Automaton, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Aho-Corasick Automaton",
        "content": "Let's look at how Aho-Corasick Automaton is applied in real-world scenarios. We'll walk through code that uses Aho-Corasick Automaton effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Aho-Corasick Automaton?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Aho-Corasick Automaton is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Aho-Corasick Automaton?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Aho-Corasick Automaton implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Aho-Corasick Automaton commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Aho-Corasick Automaton early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Aho-Corasick Automaton early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Aho-Corasick Automaton is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Aho-Corasick Automaton?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Aho-Corasick Automaton is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "automata"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe42"
  },
  "conceptId": "suffix_automaton",
  "title": "Suffix Automaton",
  "description": "Description for Suffix Automaton.",
  "videoUrl": "https://dummyurl.com/video/suffix_automaton",
  "prerequisites": [],
  "content": {
    "intro": "Suffix Automaton is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Suffix Automaton",
        "content": "This section provides a basic explanation of Suffix Automaton, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Suffix Automaton",
        "content": "Let's look at how Suffix Automaton is applied in real-world scenarios. We'll walk through code that uses Suffix Automaton effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Suffix Automaton?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Suffix Automaton is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Suffix Automaton?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Suffix Automaton implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Suffix Automaton commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Suffix Automaton early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Suffix Automaton early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Suffix Automaton is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Suffix Automaton?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Suffix Automaton is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "automata"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe43"
  },
  "conceptId": "wavelet_tree",
  "title": "Wavelet Tree",
  "description": "Description for Wavelet Tree.",
  "videoUrl": "https://dummyurl.com/video/wavelet_tree",
  "prerequisites": [],
  "content": {
    "intro": "Wavelet Tree is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Wavelet Tree",
        "content": "This section provides a basic explanation of Wavelet Tree, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Wavelet Tree",
        "content": "Let's look at how Wavelet Tree is applied in real-world scenarios. We'll walk through code that uses Wavelet Tree effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Wavelet Tree?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Wavelet Tree is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Wavelet Tree?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Wavelet Tree implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Wavelet Tree commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Wavelet Tree early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Wavelet Tree early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Wavelet Tree is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Wavelet Tree?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Wavelet Tree is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "trees"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe44"
  },
  "conceptId": "dynamic_connectivity_link_cut_tree",
  "title": "Dynamic Connectivity (Link-Cut Tree)",
  "description": "Description for Dynamic Connectivity (Link-Cut Tree).",
  "videoUrl": "https://dummyurl.com/video/dynamic_connectivity_link_cut_tree",
  "prerequisites": [],
  "content": {
    "intro": "Dynamic Connectivity (Link-Cut Tree) is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Dynamic Connectivity (Link-Cut Tree)",
        "content": "This section provides a basic explanation of Dynamic Connectivity (Link-Cut Tree), including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Dynamic Connectivity (Link-Cut Tree)",
        "content": "Let's look at how Dynamic Connectivity (Link-Cut Tree) is applied in real-world scenarios. We'll walk through code that uses Dynamic Connectivity (Link-Cut Tree) effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Dynamic Connectivity (Link-Cut Tree)?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Dynamic Connectivity (Link-Cut Tree) is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Dynamic Connectivity (Link-Cut Tree)?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Dynamic Connectivity (Link-Cut Tree) implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Dynamic Connectivity (Link-Cut Tree) commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Dynamic Connectivity (Link-Cut Tree) early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Dynamic Connectivity (Link-Cut Tree) early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Dynamic Connectivity (Link-Cut Tree) is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Dynamic Connectivity (Link-Cut Tree)?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Dynamic Connectivity (Link-Cut Tree) is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "dynamic graphs"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe45"
  },
  "conceptId": "euler_tour_tree",
  "title": "Euler Tour Tree",
  "description": "Description for Euler Tour Tree.",
  "videoUrl": "https://dummyurl.com/video/euler_tour_tree",
  "prerequisites": [],
  "content": {
    "intro": "Euler Tour Tree is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Euler Tour Tree",
        "content": "This section provides a basic explanation of Euler Tour Tree, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Euler Tour Tree",
        "content": "Let's look at how Euler Tour Tree is applied in real-world scenarios. We'll walk through code that uses Euler Tour Tree effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Euler Tour Tree?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Euler Tour Tree is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Euler Tour Tree?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Euler Tour Tree implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Euler Tour Tree commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Euler Tour Tree early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Euler Tour Tree early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Euler Tour Tree is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Euler Tour Tree?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Euler Tour Tree is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "dynamic graphs"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe46"
  },
  "conceptId": "bitwise_operators",
  "title": "Bitwise Operators",
  "description": "Description for Bitwise Operators.",
  "videoUrl": "https://dummyurl.com/video/bitwise_operators",
  "prerequisites": [],
  "content": {
    "intro": "Bitwise Operators is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Bitwise Operators",
        "content": "This section provides a basic explanation of Bitwise Operators, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Bitwise Operators",
        "content": "Let's look at how Bitwise Operators is applied in real-world scenarios. We'll walk through code that uses Bitwise Operators effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Bitwise Operators?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Bitwise Operators is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Bitwise Operators?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Bitwise Operators implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Bitwise Operators commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Bitwise Operators early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Bitwise Operators early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Bitwise Operators is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Bitwise Operators?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Bitwise Operators is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "basics"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe47"
  },
  "conceptId": "pointers",
  "title": "Pointers",
  "description": "Description for Pointers.",
  "videoUrl": "https://dummyurl.com/video/pointers",
  "prerequisites": [],
  "content": {
    "intro": "Pointers is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Pointers",
        "content": "This section provides a basic explanation of Pointers, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Pointers",
        "content": "Let's look at how Pointers is applied in real-world scenarios. We'll walk through code that uses Pointers effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Pointers?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Pointers is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Pointers?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Pointers implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Pointers commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Pointers early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Pointers early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Pointers is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Pointers?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Pointers is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "basics"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe48"
  },
  "conceptId": "recursion_trees",
  "title": "Recursion Trees",
  "description": "Description for Recursion Trees.",
  "videoUrl": "https://dummyurl.com/video/recursion_trees",
  "prerequisites": [],
  "content": {
    "intro": "Recursion Trees is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Recursion Trees",
        "content": "This section provides a basic explanation of Recursion Trees, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Recursion Trees",
        "content": "Let's look at how Recursion Trees is applied in real-world scenarios. We'll walk through code that uses Recursion Trees effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Recursion Trees?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Recursion Trees is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Recursion Trees?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Recursion Trees implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Recursion Trees commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Recursion Trees early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Recursion Trees early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Recursion Trees is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Recursion Trees?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Recursion Trees is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "algorithms"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe49"
  },
  "conceptId": "time_complexity_analysis",
  "title": "Time Complexity Analysis",
  "description": "Description for Time Complexity Analysis.",
  "videoUrl": "https://dummyurl.com/video/time_complexity_analysis",
  "prerequisites": [],
  "content": {
    "intro": "Time Complexity Analysis is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Time Complexity Analysis",
        "content": "This section provides a basic explanation of Time Complexity Analysis, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Time Complexity Analysis",
        "content": "Let's look at how Time Complexity Analysis is applied in real-world scenarios. We'll walk through code that uses Time Complexity Analysis effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Time Complexity Analysis?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Time Complexity Analysis is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Time Complexity Analysis?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Time Complexity Analysis implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Time Complexity Analysis commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Time Complexity Analysis early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Time Complexity Analysis early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Time Complexity Analysis is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Time Complexity Analysis?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Time Complexity Analysis is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "fundamentals"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe4a"
  },
  "conceptId": "space_complexity_analysis",
  "title": "Space Complexity Analysis",
  "description": "Description for Space Complexity Analysis.",
  "videoUrl": "https://dummyurl.com/video/space_complexity_analysis",
  "prerequisites": [],
  "content": {
    "intro": "Space Complexity Analysis is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Space Complexity Analysis",
        "content": "This section provides a basic explanation of Space Complexity Analysis, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Space Complexity Analysis",
        "content": "Let's look at how Space Complexity Analysis is applied in real-world scenarios. We'll walk through code that uses Space Complexity Analysis effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Space Complexity Analysis?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Space Complexity Analysis is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Space Complexity Analysis?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Space Complexity Analysis implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Space Complexity Analysis commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Space Complexity Analysis early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Space Complexity Analysis early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Space Complexity Analysis is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Space Complexity Analysis?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Space Complexity Analysis is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "fundamentals"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe4b"
  },
  "conceptId": "big_o_notation",
  "title": "Big O Notation",
  "description": "Description for Big O Notation.",
  "videoUrl": "https://dummyurl.com/video/big_o_notation",
  "prerequisites": [],
  "content": {
    "intro": "Big O Notation is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Big O Notation",
        "content": "This section provides a basic explanation of Big O Notation, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Big O Notation",
        "content": "Let's look at how Big O Notation is applied in real-world scenarios. We'll walk through code that uses Big O Notation effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Big O Notation?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Big O Notation is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Big O Notation?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Big O Notation implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Big O Notation commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Big O Notation early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Big O Notation early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Big O Notation is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Big O Notation?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Big O Notation is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "fundamentals"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe4c"
  },
  "conceptId": "recursion_vs_iteration",
  "title": "Recursion vs Iteration",
  "description": "Description for Recursion vs Iteration.",
  "videoUrl": "https://dummyurl.com/video/recursion_vs_iteration",
  "prerequisites": [],
  "content": {
    "intro": "Recursion vs Iteration is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Recursion vs Iteration",
        "content": "This section provides a basic explanation of Recursion vs Iteration, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Recursion vs Iteration",
        "content": "Let's look at how Recursion vs Iteration is applied in real-world scenarios. We'll walk through code that uses Recursion vs Iteration effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Recursion vs Iteration?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Recursion vs Iteration is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Recursion vs Iteration?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Recursion vs Iteration implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Recursion vs Iteration commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Recursion vs Iteration early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Recursion vs Iteration early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Recursion vs Iteration is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Recursion vs Iteration?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Recursion vs Iteration is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "fundamentals"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe4d"
  },
  "conceptId": "problem_decomposition",
  "title": "Problem Decomposition",
  "description": "Description for Problem Decomposition.",
  "videoUrl": "https://dummyurl.com/video/problem_decomposition",
  "prerequisites": [],
  "content": {
    "intro": "Problem Decomposition is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Problem Decomposition",
        "content": "This section provides a basic explanation of Problem Decomposition, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Problem Decomposition",
        "content": "Let's look at how Problem Decomposition is applied in real-world scenarios. We'll walk through code that uses Problem Decomposition effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Problem Decomposition?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Problem Decomposition is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Problem Decomposition?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Problem Decomposition implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Problem Decomposition commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Problem Decomposition early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Problem Decomposition early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Problem Decomposition is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Problem Decomposition?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Problem Decomposition is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "problem solving"
  ]
},
{
  "_id": {
    "$oid": "686e7be67e20de1e720bfe4e"
  },
  "conceptId": "debugging_techniques",
  "title": "Debugging Techniques",
  "description": "Description for Debugging Techniques.",
  "videoUrl": "https://dummyurl.com/video/debugging_techniques",
  "prerequisites": [],
  "content": {
    "intro": "Debugging Techniques is a key concept that serves as a foundation for understanding more advanced topics in programming.",
    "sections": [
      {
        "heading": "Basic Understanding of Debugging Techniques",
        "content": "This section provides a basic explanation of Debugging Techniques, including its role in programming and syntax.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      },
      {
        "heading": "Basic Examples of Debugging Techniques",
        "content": "Let's look at how Debugging Techniques is applied in real-world scenarios. We'll walk through code that uses Debugging Techniques effectively.",
        "codeExamples": [
          "// Declaring a variable\nint x = 5;",
          "// Output variable\nSystem.out.println(x);"
        ]
      }
    ]
  },
  "quiz": {
    "questions": [
      {
        "questionId": "q1",
        "text": "What is the main purpose of Debugging Techniques?",
        "options": [
          "To allocate memory for data",
          "To structure program flow",
          "To optimize runtime",
          "To perform sorting operations"
        ],
        "answer": 0,
        "explanation": "Debugging Techniques is primarily used to store and manage data in memory efficiently."
      },
      {
        "questionId": "q2",
        "text": "Which statement is true about Debugging Techniques?",
        "options": [
          "{concept} is used only in object-oriented languages.",
          "{concept} is fundamental in data science.",
          "{concept} helps in better memory management.",
          "{concept} is used only in frontend development."
        ],
        "answer": 2,
        "explanation": "Debugging Techniques implementations often follow structured design patterns or algorithms."
      },
      {
        "questionId": "q3",
        "text": "How is Debugging Techniques commonly implemented?",
        "options": [
          "Using a tree structure",
          "Using a loop construct",
          "Using a class definition",
          "Using an appropriate data structure or algorithm"
        ],
        "answer": 3,
        "explanation": "Learning Debugging Techniques early helps in building foundational problem-solving skills."
      },
      {
        "questionId": "q4",
        "text": "Why should one learn Debugging Techniques early?",
        "options": [
          "It helps with advanced game design",
          "It is foundational for problem solving",
          "It is needed for system security",
          "It helps build websites"
        ],
        "answer": 1,
        "explanation": "Debugging Techniques is often useful for optimizing how memory is allocated and accessed."
      },
      {
        "questionId": "q5",
        "text": "Which is NOT related to Debugging Techniques?",
        "options": [
          "Function overloading",
          "Debugging variables",
          "Iterative traversal",
          "Exception handling"
        ],
        "answer": 0,
        "explanation": "Debugging Techniques is primarily used to store and manage data in memory efficiently."
      }
    ]
  },
  "tags": [
    "problem solving"
  ]
}]